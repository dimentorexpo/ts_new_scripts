// –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º
let TP_addres;
let TP_addresRzrv;
chrome.storage.local.get({ TP_addr: '' }, function (result) {
    TP_addres = result.TP_addr;
});

chrome.storage.local.get({ TP_addrRzrv: '' }, function (result) {
    TP_addresRzrv = result.TP_addrRzrv;
});
const editorExtensionId = localStorage.getItem('ext_id');
var nameContainer = '';
const StylesElemValues = "cursor: pointer; width: 30px; height: 30px; font-size: 15px; margin-left: -8px; font-family: sans-serif,-apple-system,BlinkMacSystemFont,Segoe UI,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Helvetica Neue,Helvetica,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,NotoEmoji,Twemoji; border-radius: 15px;";
var win_UsersInfo = // –æ–ø–∏—Å–∞–Ω–∏–µ –æ–∫–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    `<span style="display: block;">
        <span id="CurrUser" title="–û—Ç–∫—Ä—ã—Ç—å –≤ CRM –æ–±—Ä–∞—Ç–∏–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" style="cursor:pointer;"></span>
        <button class="mainButton" id="CurUsScriptPac" title="–û—Ç–∫—Ä—ã—Ç—å –≤ Script Package –æ–±—Ä–∞—Ç–∏–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" style="${StylesElemValues}">‚ÑπÔ∏è</button>
        <button class="mainButton" id="CurUsLoginer" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å—Å—ã–ª–∫—É –ª–æ–≥–∏–Ω–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–∏–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" style="${StylesElemValues}">üîë</button>
        <button class="mainButton" id="CurUstroublesh" title="–û—Ç–∫—Ä—ã—Ç—å –≤ –¢–® –æ–±—Ä–∞—Ç–∏–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" style="${StylesElemValues}">üïµÔ∏è‚Äç‚ôÄÔ∏è</button>
        <button class="mainButton" id="CurUsChatHis" title="–û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" style="${StylesElemValues}">‚ò¢</button>
        <button class="mainButton" id="CurUsChatHisWA" title="–û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ WA –æ–±—Ä–∞—Ç–∏–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" style="${StylesElemValues}">
            <img src="chrome-extension://${editorExtensionId}/Images/WA.png" alt="WA" width="20" height="20" vertical-align="top"></button>
        <button class="mainButton" id="CurUsUserInf" title="–û—Ç–∫—Ä—ã—Ç—å –≤ ‚öú –æ–±—Ä–∞—Ç–∏–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" style="${StylesElemValues}">‚öú</button>
        <button class="mainButton" id="CurUsMarks" title="–û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ü–µ–Ω–æ–∫ –æ–±—Ä–∞—Ç–∏–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" style="${StylesElemValues}">üìä</button>
    </span>
    <span id="nextUsersp" style="display: none;">
        <span id="NextUser" title="–û—Ç–∫—Ä—ã—Ç—å –≤ CRM –£/–ü —Å –∫–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫" style="cursor:pointer;"></span>
        <button class="mainButton" id="NextUsScriptPac" title="–û—Ç–∫—Ä—ã—Ç—å –≤ Script Package –£/–ü —Å –∫–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫" style="${StylesElemValues}">‚ÑπÔ∏è</button>
        <button class="mainButton" id="NextUsLoginer" title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å—Å—ã–ª–∫—É –ª–æ–≥–∏–Ω–µ—Ä –¥–ª—è –£/–ü —Å –∫–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫" style="${StylesElemValues}">üîë</button>
        <button class="mainButton" id="NextUstroublesh" title="–û—Ç–∫—Ä—ã—Ç—å –≤ –¢–® –£/–ü —Å –∫–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫" style="${StylesElemValues}">üïµÔ∏è‚Äç‚ôÄÔ∏è</button>
        <button class="mainButton" id="NextUsChatHis" title="–û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –£/–ü —Å –∫–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫" style="${StylesElemValues}">‚ò¢</button>
        <button class="mainButton" id="NextUsUserInf" title="–û—Ç–∫—Ä—ã—Ç—å –≤ ‚öú –£/–ü —Å –∫–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫" style="${StylesElemValues}">‚öú</button>
    </span>
`;

// –ë–ª–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∏–∑ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü

function requestsRed(taketaskElement) {

    if (taketaskElement) {
        const text = taketaskElement.textContent.trim();
        const color = text === '–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤' ? 'white' : '#F34723';
        taketaskElement.style.background = color;
    }
}

function newTags(tagName) { //—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–µ–≥–æ–≤ –≤ —á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–µ —Ç—è–Ω—É—Ç—Å—è –∏–∑ –¥–æ–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ —Ç–∞–∫ —Å–∫–∞–∑–∞—Ç—å
    let chatId = getChatId();

    if (chatId) {
        if (tagName.split(',').length < 2)
            fetch("https://skyeng.autofaq.ai/api/conversation/" + chatId + "/payload", {
                "headers": {
                    "content-type": "application/json",
                    "x-csrf-token": aftoken
                },
                "body": "{\"conversationId\":\"" + chatId + "\",\"elements\":[{\"name\":\"tags\",\"value\":[\"" + tagName + "\"]}]}",
                "method": "POST",
                "credentials": "include"
            });
        else if (tagName.split(',').length == 2)
            fetch("https://skyeng.autofaq.ai/api/conversation/" + chatId + "/payload", {
                "headers": {
                    "content-type": "application/json",
                    "x-csrf-token": aftoken
                },
                "body": "{\"conversationId\":\"" + chatId + "\",\"elements\":[{\"name\":\"tags\",\"value\":[\"" + tagName.split(',')[0] + "\" ,\"" + tagName.split(',')[1] + "\"]}]}",
                "method": "POST",
                "credentials": "include"
            });
    }
}

function Lessonisnow(iframeDoc) { // –¥–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—É—é –Ω–∞–¥–ø–∏—Å—å –æ —Ç–æ–º —á—Ç–æ —Å–µ–π—á–∞—Å –∏–¥–µ—Ç —É—Ä–æ–∫
    const Convlist = iframeDoc.querySelectorAll('#__next [class^="DialogsCard_Card"]');
    let activeConvElem = null;

    if (Convlist.length > 0) {
        const lessonStatus = SearchinAFnewUI("nextClass-statusHTML");

        if (lessonStatus.includes("–∏–¥–µ—Ç") || lessonStatus.includes("–∏–¥—ë—Ç")) {
            for (let i = 0; i < Convlist.length; i++) {
                if (Convlist[i].getAttribute('aria-selected') === 'true') {
                    activeConvElem = Convlist[i];
                    break;
                }
            }

            if (activeConvElem && activeConvElem.getElementsByClassName('LessonIndicator').length === 0) {
                let LessonIndicator = document.createElement('span');
                LessonIndicator.style.cssText = "background: rgb(187, 5, 5); padding: 5px; color: #fff; font-weight: 400; border: 1px solid black;";
                LessonIndicator.className = 'LessonIndicator';
                LessonIndicator.textContent = lessonStatus;

                activeConvElem.children[0].children[0].append(LessonIndicator)
            }
        }
    }
}

function autoStatusSwitch() { // —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ê–§ –≤ —Å–≤–æ–æ—Ç–µ—Ç—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤ –º–æ–¥—É–ª–µ Settings

    try {
        if (location.href == "https://skyeng.autofaq.ai/tickets/common") {
            let checkOperatorName = document.querySelector('.user_menu-dropdown-user_name').textContent.includes("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å");
            if (checkOperatorName && checkOperatorName == true) {
                console.log("–≠—Ç–æ –¢–ü –û–°, —Ç—É—Ç –Ω–µ –Ω—É–∂–µ–Ω –∞–≤—Ç–æ—Å—Ç–∞—Ç—É—Å –Ω–∏–∫–∞–∫–æ–π!")
                clearInterval(statusCheckInt)
            } else {
                let aStatusVar = localStorage.getItem('afterLoginFunction');
                if (aStatusVar == null) {
                    localStorage.setItem('afterLoginFunction', 'Online')
                    console.log("variable was not found and setted by default value Online ")
                    changeStatus(aStatusVar)
                    clearInterval(statusCheckInt)
                    console.log('Interval timer stopped', 'status was changed to ' + aStatusVar)
                } else {
                    changeStatus(aStatusVar)
                    clearInterval(statusCheckInt)
                    console.log('Interval timer stopped', 'status was changed to ' + aStatusVar)

                }
            }
        }
    } catch (error) {
        console.log("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error.message);
    }
}

const statusCheckInt = setInterval(autoStatusSwitch, 500)

function startTimer() {
    let tagsshowflag = localStorage.getItem('showquicktags');
    const trigertestchat = localStorage.getItem('trigertestchat');
    const hrefisnow = window.location.href;
    const iframeElement = document.querySelector('[class^="NEW_FRONTEND__frame"]');
    let taketaskElement = null;

    if (iframeElement) {
        const iframeDoc = document.querySelector('[class^="NEW_FRONTEND__frame"]').contentDocument || document.querySelector('[class^="NEW_FRONTEND__frame"]').contentWindow.document;
        const Usernamefield = iframeDoc.querySelectorAll('[class^="User_Preview"]')[0];
        const Searchlist = iframeDoc.querySelectorAll('[class^="Operator_DialogsActions"]');

        if (Searchlist) {
            for (let i = 0; i < Searchlist.length; i++) {
                const SearchElement = Searchlist[i].children[1].classList;
                if (Array.from(SearchElement).some((className) => className.includes('Operator_TakeRequestButton'))) {
                    taketaskElement = Searchlist[i].children[1];
                    break;
                }
            }
        }

        if (hrefisnow.includes('skyeng.autofaq.ai/tickets/assigned')) {
            Lessonisnow(iframeDoc);
            requestsRed(taketaskElement);

            if (scriptAdr == TP_addres || scriptAdr == TP_addresRzrv) { // –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¢–ü
                if (hrefisnow.includes('skyeng.autofaq.ai/tickets/assigned') && document.getElementById('TestUsers')) { // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–∫–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º —Å –∫–µ–º –æ–±—â–∞–µ–º—Å—è.
                    const iframeDoc = document.querySelector('[class^="NEW_FRONTEND__frame"]').contentDocument || document.querySelector('[class^="NEW_FRONTEND__frame]').contentWindow.document;
                    const Convlist = iframeDoc.querySelectorAll('#__next [class^="DialogsCard_Card"]');

                    if (Convlist.length > 0) {
                        user = SearchinAFnewUI("userType");
                        if (user == "teacher") {
                            vertical = SearchinAFnewUI("teacherVertical");
                        } else {
                            vertical = SearchinAFnewUI("supportVertical");
                        }
                        if (user == '' || vertical == '') {
                            addInfoUser.innerHTML = ''
                        } else {
                            addInfoUser.innerHTML = vertical + " + " + user
                        }
                    } else {
                        addInfoUser.innerHTML = ''
                    }
                }

                if (hrefisnow.includes('skyeng.autofaq.ai/tickets/assigned') && Usernamefield) {
                    if (tagsshowflag === "1") {
                        showTaggs(iframeDoc);
                    } else if (iframeDoc.getElementById('quickTagsdiv')) {
                        iframeDoc.getElementById('quickTagsdiv').remove();
                    }

                }

                if (iframeDoc.getElementById('testchatbtn')) {
                    if (iframeDoc.getElementById('testchatbtn').style.display != 'none' && trigertestchat == "0") {
                        iframeDoc.getElementById('testchatbtn').style.display = 'none'
                    }
                    if (iframeDoc.getElementById('testchatbtn').style.display == 'none' && trigertestchat == "1") {
                        iframeDoc.getElementById('testchatbtn').style.display = ''
                    }
                }

                if (hrefisnow.includes('skyeng.autofaq.ai/tickets/assigned') && Usernamefield && iframeDoc.getElementsByClassName('UsersInfo').length == 0) { // –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –∏–Ω—Ñ—É –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
                    let userTypeName = iframeDoc.createElement('span');
                    userTypeName.id = "userTypeId";
                    userTypeName.style = "margin-left:5px;";
                    Usernamefield.children[0].append(userTypeName);

                    let UsersInfofield = iframeDoc.createElement('div'); // –¥–æ–±–∞–≤–ª—è–µ–º –æ–∫–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
                    UsersInfofield.classList = 'UsersInfo';
                    UsersInfofield.style = "display: block;"
                    UsersInfofield.innerHTML = win_UsersInfo;

                    Usernamefield.append(UsersInfofield)

                    nameContainer = getChatId()
                    let usertypeis = SearchinAFnewUI("userType");

                    let copyCrmFromName = iframeDoc.createElement('span')
                    copyCrmFromName.textContent = ' üíæ';
                    copyCrmFromName.style = "cursor:pointer; margin-left:5px;";
                    copyCrmFromName.id = 'diskettocopy';

                    Usernamefield.children[0].append(copyCrmFromName)
                    copyCrmFromName.onclick = function () {
                        const getidafuser = SearchinAFnewUI("id");
                        copyToClipboard("https://crm2.skyeng.ru/persons/" + getidafuser);
                        createAndShowButton('üíæ C–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', 'message');
                    }
                    let testchatbtn = iframeDoc.createElement('span')
                    testchatbtn.textContent = ' test';
                    testchatbtn.style = "cursor: pointer;margin-left: 5px;color: crimson;font-size: medium;margin-left: auto;margin-right: auto; display: none;";
                    testchatbtn.id = 'testchatbtn';

                    Usernamefield.children[0].append(testchatbtn)
                    testchatbtn.onclick = function () {
                        sendComment('–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç');
                        setTimeout(() => { newTaggg('double') }, 500);
                        setTimeout(() => { newTag('1710') }, 1000);
                    }

                    if (usertypeis === "teacher") {
                        iframeDoc.getElementById('userTypeId').textContent = " (–ü)";
                        iframeDoc.getElementById('userTypeId').style.color = "#1E90FF";

                    } else if (usertypeis === "student") {
                        iframeDoc.getElementById('userTypeId').textContent = " (–£)";
                        iframeDoc.getElementById('userTypeId').style.color = "#DC143C";

                    } else if (usertypeis === "parent") {
                        iframeDoc.getElementById('userTypeId').textContent = " (–†–£)";
                        iframeDoc.getElementById('userTypeId').style.color = "#DC143C";
                    }


                    if (usertypeis === "teacher") {
                        iframeDoc.getElementById('CurrUser').innerHTML = "üëΩ :";
                        let nextuseris = SearchinAFnewUI("nextClass-studentId");
                        if (nextuseris != '') {
                            iframeDoc.getElementById('NextUser').innerHTML = "üë®‚Äçüéì :";
                            iframeDoc.getElementById('nextUsersp').style.display = 'block';
                        }
                    } else if (usertypeis === "student" || usertypeis === "parent") {
                        iframeDoc.getElementById('CurrUser').innerHTML = "üë®‚Äçüéì :";
                        let nextuseris = SearchinAFnewUI("nextClass-teacherId");
                        if (nextuseris != '') {
                            iframeDoc.getElementById('NextUser').innerHTML = "üëΩ :";
                            iframeDoc.getElementById('nextUsersp').style.display = 'block';
                        }
                    } else {
                        iframeDoc.getElementById('CurrUser').innerHTML = "‚ùì :";
                        iframeDoc.getElementById('CurrUser').title += ". –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∫–Ω–æ–ø–∫–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å"
                    }
                    buttonsfunctionsinfo(iframeDoc, usertypeis);
                } else if (hrefisnow.includes('skyeng.autofaq.ai/tickets/assigned') && Usernamefield && iframeDoc.getElementsByClassName('UsersInfo').length == 1) { // —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
                    if (getChatId() != nameContainer) {
                        iframeDoc.getElementsByClassName('UsersInfo')[0].remove()
                        iframeDoc.getElementById('userTypeId').remove()
                        iframeDoc.getElementById('diskettocopy').remove()
                    }
                }
            }
        }
    }



    if (localStorage.getItem('audio') === '1' && hrefisnow.includes('skyeng.autofaq.ai')) {
        if (taketaskElement) {
            if (taketaskElement.textContent !== '–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤') {
                ConvAudio('on');
            } else {
                ConvAudio('off');
            }
        }
    }


}

function buttonsfunctionsinfo(iframeDoc, usertypeis) {
    async function handleLoginLinkClick(idNode, buttonStyle) { // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –∫–Ω–æ–ø–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        buttonStyle.background = "coral";
        try {
            await getLoginLink(idNode);
            buttonStyle.background = "rgb(29, 235, 10)";
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞: ', error);
            buttonStyle.background = "rgb(201, 17, 17)";
        } finally {
            setTimeout(() => { buttonStyle.background = ""; }, 1000);
        }
    }

    iframeDoc.getElementById('CurrUser').onclick = function () {
        this.style.background = "lightgreen";
        setTimeout(() => {
            this.style.background = "";
        }, 1000);
        const idNode = SearchinAFnewUI("id");
        if (idNode) {
            window.open('https://crm2.skyeng.ru/persons/' + idNode)
        }
    }

    iframeDoc.getElementById('CurUsScriptPac').onclick = function () {
        this.style.background = "lightgreen";
        setTimeout(() => {
            this.style.background = "";
        }, 1000);
        const idNode = SearchinAFnewUI("id");
        if (idNode) {
            const editorExtensionId = localStorage.getItem('ext_id');
            chrome.runtime.sendMessage(
                editorExtensionId,
                {
                    name: 'chm_message', question: 'send_event', messageValue: {
                        message: 'open-user-info',
                        userId: `${idNode}`,
                    },
                },
                function (response) {
                    if (chrome.runtime.lastError) {
                        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', chrome.runtime.lastError);
                    } else {
                        console.log('–û—Ç–≤–µ—Ç –æ—Ç –±–µ–∫–≥—Ä–∞—É–Ω–¥-—Å–∫—Ä–∏–ø—Ç–∞:', response);
                    }
                }
            );
        }
    }

    iframeDoc.getElementById('CurUsLoginer').onclick = async function () {
        const idNode = SearchinAFnewUI("id");
        if (idNode) {
            await handleLoginLinkClick(idNode, this.style);
        } else {
            this.style.background = "rgb(201, 17, 17)";
            setTimeout(() => { this.style.background = ""; }, 1000);
        }
    };

    iframeDoc.getElementById('CurUstroublesh').onclick = function () {
        this.style.background = "lightgreen";
        setTimeout(() => {
            this.style.background = "";
        }, 1000);
        const idNode = SearchinAFnewUI("id");
        if (idNode) {
            let curtime = new Date();
            let mesjac;
            let denj;

            if (curtime.getDate() < 10) {
                denj = "0" + curtime.getDate();
            } else {
                denj = curtime.getDate();
            }
            if (curtime.getMonth() + 1 < 10) {
                mesjac = "0" + (curtime.getMonth() + 1);
            } else {
                mesjac = curtime.getMonth() + 1;
            }

            window.open('https://video-trouble-shooter.skyeng.ru/?userId=' + idNode + '&from=' + curtime.getFullYear() + '-' + mesjac + '-'
                + (denj - 1 == 0 ? denj : (denj - 1 < 10 ? "0" + (denj - 1) : denj)) + 'T00:00:00&to=' + curtime.getFullYear() + '-' + mesjac + '-' + denj + 'T23:59:00&order=desc')
        }
    }

    iframeDoc.getElementById('CurUsChatHis').onclick = function () {
        this.style.background = "lightgreen";
        setTimeout(() => {
            this.style.background = "";
        }, 1000);
        const idNode = SearchinAFnewUI("id");

        document.getElementById('opennewcat').click();

        if (idNode) {
            document.getElementById('chatuserhis').value = idNode
            btn_search_history.click()
        }

    }

    iframeDoc.getElementById('CurUsChatHisWA').onclick = function () {
        this.style.background = "lightgreen";
        setTimeout(() => {
            this.style.background = "";
        }, 1000);
        const idNode = SearchinAFnewUI("phone").split('+')[1];

        document.getElementById('opennewcat').click();

        if (idNode) {
            document.getElementById('chatuserhis').value = idNode
            btn_search_history.click()
        }

    }

    iframeDoc.getElementById('CurUsUserInf').onclick = function () {
        this.style.background = "lightgreen";
        setTimeout(() => {
            this.style.background = "";
        }, 1000);
        const idNode = SearchinAFnewUI("id");

        if (idNode) {
            const AF_Service = document.getElementById('AF_Service');
            if (AF_Service.style.display === 'none') {
                AF_Service.style.display = '';
            }
            document.getElementById('idstudent').value = idNode;
            getidstudent.click();
        }
    }

    iframeDoc.getElementById('CurUsMarks').onclick = function () {
        this.style.background = "lightgreen";
        setTimeout(() => {
            this.style.background = "";
        }, 1000);
        const idNode = SearchinAFnewUI("id");

        if (idNode) {
            marksstata(idNode);
        }
    }

    iframeDoc.getElementById('NextUser').onclick = function () {
        this.style.background = "lightgreen";
        setTimeout(() => {
            this.style.background = "";
        }, 1000);
        let requestargument = findrequestargument(usertypeis);

        const idNode = SearchinAFnewUI(requestargument);
        if (idNode) {
            window.open('https://crm2.skyeng.ru/persons/' + idNode)
        }
    }

    iframeDoc.getElementById('NextUsScriptPac').onclick = function () {
        this.style.background = "lightgreen";
        setTimeout(() => {
            this.style.background = "";
        }, 1000);
        let requestargument = findrequestargument(usertypeis);

        const idNode = SearchinAFnewUI(requestargument);
        if (idNode) {
            const editorExtensionId = localStorage.getItem('ext_id');
            chrome.runtime.sendMessage(
                editorExtensionId,
                {
                    name: 'chm_message', question: 'send_event', messageValue: {
                        message: 'open-user-info',
                        userId: `${idNode}`,
                    },
                },
            );
        }
    }

    iframeDoc.getElementById('NextUsLoginer').onclick = async function () {
        let requestargument = findrequestargument(usertypeis);
        const idNode = SearchinAFnewUI(requestargument);

        if (idNode) {
            await handleLoginLinkClick(idNode, this.style);
        } else {
            this.style.background = "rgb(201, 17, 17)";
            setTimeout(() => { this.style.background = ""; }, 1000);
        }
    };

    iframeDoc.getElementById('NextUstroublesh').onclick = function () {
        this.style.background = "lightgreen";
        setTimeout(() => {
            this.style.background = "";
        }, 1000);
        let requestargument = findrequestargument(usertypeis);
        const idNode = SearchinAFnewUI(requestargument);

        if (idNode) {
            let curtime = new Date();
            let mesjac;
            let denj;

            if (curtime.getDate() < 10) {
                denj = "0" + curtime.getDate();
            } else {
                denj = curtime.getDate();
            }
            if (curtime.getMonth() + 1 < 10) {
                mesjac = "0" + (curtime.getMonth() + 1);
            } else {
                mesjac = curtime.getMonth() + 1;
            }

            window.open('https://video-trouble-shooter.skyeng.ru/?userId=' + idNode + '&from=' + curtime.getFullYear() + '-' + mesjac + '-'
                + (denj - 1 == 0 ? denj : (denj - 1 < 10 ? "0" + (denj - 1) : denj)) + 'T00:00:00&to=' + curtime.getFullYear() + '-' + mesjac + '-' + denj + 'T23:59:00&order=desc')
        }

    }

    iframeDoc.getElementById('NextUsChatHis').onclick = function () {
        this.style.background = "lightgreen";
        setTimeout(() => {
            this.style.background = "";
        }, 1000);
        let requestargument = findrequestargument(usertypeis);
        const idNode = SearchinAFnewUI(requestargument);
        document.getElementById('opennewcat').click();

        if (idNode) {
            document.getElementById('chatuserhis').value = idNode
            btn_search_history.click()
        }

    }

    iframeDoc.getElementById('NextUsUserInf').onclick = function () {
        this.style.background = "lightgreen";
        setTimeout(() => {
            this.style.background = "";
        }, 1000);
        let requestargument = findrequestargument(usertypeis);

        const idNode = SearchinAFnewUI(requestargument);

        if (idNode) {
            const AF_Service = document.getElementById('AF_Service');
            if (AF_Service.style.display === 'none') {
                AF_Service.style.display = '';
            }
            document.getElementById('idstudent').value = idNode;
            getidstudent.click();
        }
    }
}

function findrequestargument(usertypeis) {
    let requestargument = null;
    if (usertypeis == "teacher") {
        requestargument = "nextClass-studentId";
    } else {
        requestargument = "nextClass-teacherId";
    }
    return requestargument
}

function ConvAudio(triger) {
    if (!soundintervalset && triger === 'on') {
        audio.play();
        soundintervalset = setInterval(() => { audio.play() }, localStorage.getItem('splinter') * 1000);
    } else if (soundintervalset && triger === 'off') {
        clearInterval(soundintervalset);
        soundintervalset = null;
    }
}

function showTaggs(iframeDoc) {
    const FieldtoTags = iframeDoc.querySelectorAll('[class^="Form_ConversationPayloadForm"]')[0]

    if (!iframeDoc.getElementById('quickTagsdiv')) {
        let quickTagsdiv = iframeDoc.createElement('div');
        quickTagsdiv.id = 'quickTagsdiv';
        FieldtoTags.children[0].children[0].children[0].append(quickTagsdiv);

        let btn1 = iframeDoc.createElement('span');
        btn1.id = 'continue_chat_button';
        quickTagsdiv.append(btn1)
        btn1.innerHTML = '<a style="float: left; margin-right: 5px; margin-top: 10px; color: black; cursor: pointer;">–î—É–±–ª—å</a>';
        btn1.setAttribute('data-tagname', 'double')

        let btn2 = iframeDoc.createElement('span');
        btn2.id = 'refuse'
        quickTagsdiv.append(btn2)
        btn2.innerHTML = '<a style="float: left; margin-right: 5px; margin-top: 10px; color: black; cursor: pointer;">–û—Ç–∫–∞–∑</a>';
        btn2.setAttribute('data-tagname', 'refusal_of_help')

        let btn3 = iframeDoc.createElement('span');
        btn3.id = 'TPcallsend'
        quickTagsdiv.append(btn3)
        btn3.innerHTML = '<a style="float: left; margin-right: 5px; margin-top: 10px; color: black; cursor: pointer;">–ò—Å—Ö–æ–¥</a>';
        btn3.setAttribute('data-tagname', 'request_forwarded_to_outgoing_tp_crm2')

        let btn4 = iframeDoc.createElement('span');
        btn4.id = 'recgiv'
        quickTagsdiv.append(btn4)
        btn4.innerHTML = '<a style="float: left; margin-right: 5px; margin-top: 10px; color: black; cursor: pointer;">–î–∞–Ω—ã —Ä–µ–∫–æ–º</a>';
        btn4.setAttribute('data-tagname', 'recommendations_given ')

        let btn5 = iframeDoc.createElement('span');
        btn5.id = 'solvd'
        quickTagsdiv.append(btn5)
        btn5.innerHTML = '<a style="float: left; margin-right: 5px; margin-top: 10px; color: black; cursor: pointer;">–†–µ—à–µ–Ω</a>';
        btn5.setAttribute('data-tagname', 'request_solved')

        let btn6 = iframeDoc.createElement('span');
        btn6.id = 'servis'
        quickTagsdiv.append(btn6)
        btn6.innerHTML = '<a style="float: left; margin-right: 5px; margin-top: 10px; color: black; cursor: pointer;">–°–µ—Ä–≤–µ—Ä–Ω—ã–µ</a>';
        btn6.setAttribute('data-tagname', 'server_issues')

        let btn7 = iframeDoc.createElement('span');
        btn7.id = 'untargeted'
        quickTagsdiv.append(btn7)
        btn7.innerHTML = '<a style="float: left; margin-right: 5px; margin-top: 10px; color: black; cursor: pointer;">–ù–µ—Ü–µ–ª–µ–≤–æ–π</a>';
        btn7.setAttribute('data-tagname', 'untargeted')

        let btn8 = iframeDoc.createElement('span');
        btn8.id = 'ochered'
        quickTagsdiv.append(btn8)
        btn8.innerHTML = '<a style="float: left; margin-right: 5px; margin-top: 10px; color: black; cursor: pointer;">–û—á–µ—Ä–µ–¥—å</a>';
        btn8.setAttribute('data-tagname', 'queue')

        let btn9 = iframeDoc.createElement('span');
        btn9.id = 'svyazsU'
        quickTagsdiv.append(btn9)
        btn9.innerHTML = '<a style="float: left;margin-right: 5px;margin-top: 10px;color: ##1e90ff;cursor: pointer;font-weight: 700;">–ü->—Å–≤—è–∑—å –£</a>';
        btn9.setAttribute('comment-text', '–û–±—Ä–∞—Ç–∏–ª—Å—è –ü, —Å–≤—è–∑–∞—Ç—å—Å—è —Å –£')

        let btn10 = iframeDoc.createElement('span');
        btn10.id = 'svyazsP'
        quickTagsdiv.append(btn10)
        btn10.innerHTML = '<a style="float: left;margin-right: 5px;margin-top: 10px;color: #c92e52;cursor: pointer;font-weight: 700;">–£->—Å–≤—è–∑—å –ü</a>';
        btn10.setAttribute('comment-text', '–û–±—Ä–∞—Ç–∏–ª—Å—è –£, —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ü')

        let btn11 = iframeDoc.createElement('span');
        btn11.id = 'PNO'
        quickTagsdiv.append(btn11)
        btn11.innerHTML = '<a style="float: left;margin-right: 5px;margin-top: 10px;color: ##1e90ff;cursor: pointer;font-weight: 700;">–ü –ù–û</a>';
        btn11.setAttribute('comment-text', '–ö—Ä–∏—Ç –ù.–û. –ü')

        let btn12 = iframeDoc.createElement('span');
        btn12.id = 'UNO'
        quickTagsdiv.append(btn12)
        btn12.innerHTML = '<a style="float: left;margin-right: 5px;margin-top: 10px;color: #c92e52;cursor: pointer;font-weight: 700;">–£ –ù–û</a>';
        btn12.setAttribute('comment-text', '–ö—Ä–∏—Ç –ù.–û. –£')

        // –î–µ–ª–∞–µ–º –≤—ã–∑–æ–≤ newTaggg –∏–∑ iframe
        function callNewTaggg(tagName) {
            const customEvent = new CustomEvent('callNewTaggg', { detail: { tagName } });
            window.dispatchEvent(customEvent);
        }

        // –î–µ–ª–∞–µ–º –≤—ã–∑–æ–≤ sendComent –∏–∑ iframe
        function CallNewComment(comment) {
            const customEvent = new CustomEvent('CallNewComment', { detail: { comment } });
            window.dispatchEvent(customEvent);
        }

        //–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
        const buttons = quickTagsdiv.querySelectorAll('span');
        buttons.forEach((btn) => {
            btn.addEventListener('click', function () {
                const tagName = this.getAttribute('data-tagname');
                const comment = this.getAttribute('comment-text')
                if (tagName) {
                    callNewTaggg(tagName);
                }
                if (comment) {
                    CallNewComment(comment);
                }
            });
        });
    }
}

function bagPageButtons(butId) {  //—Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Ç–æ–∂–µ —Ñ—É–∫–Ω–∫—Ü–∏—è —Å–≤—è–∑–∞–Ω–∞
    txt = document.getElementById(butId).parentElement.childNodes[0].textContent
    for (l = 0; l < table.length; l++)
        if (table[l][0] == txt) {
            resetFlags()
            document.getElementById('inp').value = table[l][Number(butId[4]) + 1]
            break
        }
}

function maskPhoneNumber(number) { // –∑–∞–º–µ–Ω–∞ —á–∞—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é —á–∞—Å—Ç—å –Ω–æ–º–µ—Ä–∞
    const start = number.startsWith('+') ? number.substring(0, 5) : number.substring(0, 4);
    const end = number.slice(-2);

    // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏
    const starsCount = number.length - start.length - end.length;
    const stars = '*'.repeat(starsCount);

    return start + stars + end;
}

function maskEmail(email) { // –∑–∞–º–µ–Ω–∞ —á–∞—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ email
    // –†–∞–∑–¥–µ–ª—è–µ–º email –Ω–∞ —á–∞—Å—Ç—å –¥–æ @ –∏ –¥–æ–º–µ–Ω–Ω—É—é —á–∞—Å—Ç—å
    const [localPart, domainPart] = email.split('@');

    let maskedLocalPart;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ email
    if (localPart.length > 5) {
        maskedLocalPart = localPart.substring(0, 3) + '*'.repeat(localPart.length - 5) + localPart.slice(-2);
    } else if (localPart.length === 5 || localPart.length === 4) {
        maskedLocalPart = localPart.substring(0, 2) + '*'.repeat(localPart.length - 3) + localPart.slice(-1);
    } else if (localPart.length <= 3) {
        maskedLocalPart = localPart.substring(0, 1) + '*'.repeat(localPart.length - 1);
    }

    return maskedLocalPart + '@' + domainPart;
}

function transfPageButtons(textFromTable) { //–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ—á—Ç—ã —é–∑–µ—Ä–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞

    if (textFromTable.includes('(phone)')) {
        let phone = '';
        textFromTable = textFromTable.split('(phone)');

        const phoneInput = document.getElementById('phone_tr');
        phone = phoneInput.value || phoneInput.placeholder;

        const phonePattern = /^(\+?[0-9]{7,20})$/;
        if (!phonePattern.test(phone) || phone === '–¢–µ–ª–µ—Ñ–æ–Ω') {
            document.getElementById('inp').value = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
            return;
        }

        phone = maskPhoneNumber(phone);
        textFromTable = textFromTable.join(phone);
    }

    if (textFromTable.includes('(email)')) {
        let email = '';
        textFromTable = textFromTable.split('(email)');

        const emailInput = document.getElementById('email_tr');
        email = emailInput.value || emailInput.placeholder;

        const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
        if (!emailPattern.test(email) || email === '–ü–æ—á—Ç–∞') {
            document.getElementById('inp').value = "–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É";
            return;
        }

        email = maskEmail(email);
        textFromTable = textFromTable.join(email);
    }

    if (textFromTable.includes('(name)')) {
        let name = '';
        textFromTable = textFromTable.split('(name)');

        const tempname = getActiveConvUserName();
        const cyrillicPattern = /^[\u0400-\u04FF]+$/;
        const languageAF = document.getElementById('languageAF').innerHTML;

        if (tempname !== "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π") {
            if ((languageAF === "–†—É—Å—Å–∫–∏–π" && cyrillicPattern.test(tempname)) || (languageAF === "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" && !cyrillicPattern.test(tempname))) {
                name = tempname;
            }
        }

        textFromTable = textFromTable.join(name);
    }

    return textFromTable;
}

async function buttonsFromDoc(butName) { // —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –∏ —Ç–∞–∫–∂–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—Ç —Å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    if (butName == "—É—Å+–±—Ä–∞—É–∑")
        if (!user || user == 'student')
            butName = "—É—Å+–±—Ä–∞—É–∑ (–£)"
        else
            butName = "—É—Å+–±—Ä–∞—É–∑ (–ü)"

    if (butName == '–ü—Ä–∏–≤–µ—Ç') {

        const tempname = getActiveConvUserName();
        const cyrillicPattern = /^[\u0400-\u04FF]+$/;
        const languageAF = document.getElementById('languageAF').innerHTML;

        if (languageAF == "–†—É—Å—Å–∫–∏–π") {
            if (cyrillicPattern.test(tempname) && tempname != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" && tempname != '' && document.getElementById('msg1').innerHTML == "–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å") {
                txt = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + tempname + "!" + '\r\n' + "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –í–µ—Ä–Ω—É—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            } else {
                txt = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!" + '\r\n' + "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –í–µ—Ä–Ω—É—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            }
        } else {
            if (!cyrillicPattern.test(tempname) && tempname != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" && tempname != '' && document.getElementById('msg1').innerHTML == "–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å") {
                txt = "Hello, " + tempname + "!" + '\r\n' + "I'm reviewing the information based on your request. I will return with an answer or for clarifications in a few minutes."
            } else {
                txt = "Hello!" + '\r\n' + "I'm reviewing the information based on your request. I will return with an answer or for clarifications in a few minutes."
            }
        }
        if (txt != '') {
            sendAnswerTemplate2(txt)
        }

        return
    }

    if (((butName == 'ü§¨–ù–µ–≥–∞—Ç–∏–≤ –û–°') || (butName == 'üñº–ù–µ—Ç –∏–∑–æ–±—Ä –≤ –î–ó –õ–ö') || (butName == 'üí®–°–±—Ä–æ—Å –æ—Ç–≤–µ—Ç–æ–≤ –î–ó –õ–ö') || (butName == 'üîá–ó–≤—É–∫ –æ—Ç–≤–µ—Ç–æ–≤ –õ–ö') || (butName == 'üñ•–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ') || butName == ('üñºüì±–ù–µ—Ç –∏–∑–æ–±—Ä –î–ó –≤ –ú–ü')) && document.getElementById('AF_Smartroomform').style.display == 'none')
        document.getElementById('smartroomform').click();

    msgFromTable(butName)

    // start of counter of pressed key script —Ç–æ –µ—Å—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —à–∞–±–ª–æ–Ω–æ–º –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É –∏–Ω6—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∏ —Ç–∞–º —É–∂–µ –¥—Ä —Å–∫—Ä–∏–ø—Ç—ã —Å—á–∏—Ç–∞—é—Ç —Å–∫–æ–ª—å–∫–æ  —Ä–∞–∑ –∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç
}

function servFromDoc(event) {
    let but = event.target.textContent;
    let chatthemevalue
    msgFromTable(but) // –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (document.getElementById('avariyalink').value !== null) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ —Å—Å—ã–ª–∫–∏
        let linktostatsend = document.getElementById('avariyalink').value.trim()
        sendComment(linktostatsend); // –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–µ–Ω—Ç–∞
        fetch("https://skyeng.autofaq.ai/api/conversation/" + document.URL.split('/')[5] + "/payload", { //–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ "–°—Å—ã–ª–∫–∞ –Ω–∞ jira"
            "headers": {
                "content-type": "application/json",
                "x-csrf-token": aftoken
            },
            "body": "{\"conversationId\":\"${splitter[5]}\",\"elements\":[{\"name\":\"taskUrl\",\"value\":\"" + linktostatsend + "\"}]}",
            "method": "POST",
            "mode": "cors",
            "credentials": "include"
        })
    }
    if (document.getElementById('avariyatema').children[0].selected == false) {
        for (let i = 0; i < document.getElementById('avariyatema').children.length; i++) {
            if (document.getElementById('avariyatema').children[i].selected == true)
                chatthemevalue = encodeURIComponent(document.getElementById('avariyatema').children[i].value)
            newTag(chatthemevalue)
        }
    }
}

async function getInfo(flag1 = 1) { //—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ —á–∞—Ç–µ –∏ —Å–µ—Ä–≤–∏—Å –∞–π–¥–∏
    let activeConvId = getChatId();

    var adr1 = activeConvId
    var adr = "https://skyeng.autofaq.ai/tickets/assigned/" + activeConvId
    var sessionId = ""
    for (let i = 0; i < chatsArray.length; i++) {
        if (chatsArray[i].id == adr1) {
            sessionId = chatsArray[i].sessionId
            return [adr, adr1, sessionId]
        }
    }
    if (adr1 == undefined)
        adr1 = ""
    if (document.getElementById('msg1').innerHTML != "–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å" || flag1 == 0) {
        doOperationsWithConversations(adr1)
            .then(response => response.json())
            .then(result => {
                sessionId = result.sessionId;
                chatsArray.push(result);
                localStorage.setItem('serviceIdGlob', result.serviceId);
            });
    }
    return [adr, adr1, sessionId]
}

function tagToChat(btnName) { // —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–º–∞—Ç–∏–∫—É –≤ —á–∞—Ç, —Å–ø–∏—Å–æ–∫ —Ç–µ–º–∞—Ç–∏–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–ø–µ—Ü –¥–æ–∫–µ –≥–¥–µ —à–∞–±–ª–æ–Ω—ã
    for (var l = 0; l < table.length; l++) {
        if (btnName == table[l][0]) {
            newTag(table[l][1])
            return
        }
    }
}

function newTag(valueId) {
    let chatId = getChatId();

    if (chatId) {
        fetch(`https://skyeng.autofaq.ai/api/conversation/${chatId}/payload`, {
            headers: {
                'content-type': 'application/json',
                'x-csrf-token': aftoken
            },
            body: `{"conversationId":"${chatId}","elements":[{"name":"topicId","value":"${valueId}"}]}`,
            method: 'POST',
            credentials: 'include',
        });
    }
}

function msgFromTable(btnName) { //—à–∞–±–ª–æ–Ω—ã, —Ç–µ–º–∞—Ç–∏–∫–∏. —Ç–µ–≥–∏ —Å —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—É—á–∞–µ—Ç –∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç
    for (var l = 0; l < table.length; l++) {
        if (btnName == table[l][0]) {
            tempindex = [l];
            if (table[l][8] == undefined || table[l][8] == null || table[l][8] == " " || table[l][8] == "") {
                console.log("–ù–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–∞—Ç–∏–∫–∏")
            } else {
                newTag(table[l][8])
            }

            setTimeout(() => {
                if (table[tempindex][9] == undefined || table[tempindex][9] == null || table[tempindex][9] == " " || table[tempindex][9] == "") {
                    console.log("–ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤")
                } else {
                    newTags(table[tempindex][9])
                }
            }, 1000)

            if (document.getElementById('languageAF').innerHTML == "–†—É—Å—Å–∫–∏–π") {
                if (table[l][1] == "–ë—ã—Å—Ç—Ä—ã–π —à–∞–±–ª–æ–Ω") {
                    sendAnswerTemplate2(table[l][2])
                }
                if (table[l][1] == "–¢–µ–∫—Å—Ç") {
                    sendAnswer(transfPageButtons(table[l][2]))
                }
                if (table[l][1] == "–®–∞–±–ª–æ–Ω") {
                    sendAnswerTemplate(table[l][2], table[l][3])
                }
                if (table[l][1].indexOf("–†–∞–Ω–¥–æ–º") != -1) {
                    var counttmpl = table[l][1][7]
                    var newL = Math.floor(Math.random() * (counttmpl))
                    let splittedarr = table[l][2 + newL].split('$')
                    if (splittedarr[0] == "–¢–µ–∫—Å—Ç")
                        sendAnswer(transfPageButtons(splittedarr[1]))
                    else if (splittedarr[0] == "–®–∞–±–ª–æ–Ω") {
                        sendAnswerTemplate(splittedarr[1], splittedarr[1])
                    } else {
                        document.getElementById('inp').value = "–®–∞–±–ª–æ–Ω  —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑!"
                    }

                }

                break
            } else if (table[l][1].indexOf("–†–∞–Ω–¥–æ–º") != -1) {
                var counttmpleng = table[l][1][9];
                var counttmplfor = parseInt(table[l][1][7]);
                var checkcounttmpleng = parseInt(table[l][1][7]) + parseInt(table[l][1][9]);
                if (counttmpleng > 0) {
                    var newLeng = Math.floor(Math.random() * (counttmpleng))
                    if (checkcounttmpleng <= 6) {
                        let splittedarreng = table[l][2 + counttmplfor + newLeng].split('$')
                        if (splittedarreng[0] == "–¢–µ–∫—Å—Ç") {
                            sendAnswer(splittedarreng[1])
                        } else if (splittedarreng[0] == "–®–∞–±–ª–æ–Ω") {
                            sendAnswerTemplate(splittedarreng[1], splittedarreng[1])
                        } else {
                            document.getElementById('inp').value = "–®–∞–±–ª–æ–Ω  —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑!"
                        }
                    } else {
                        document.getElementById('inp').value = "–®–∞–±–ª–æ–Ω  —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –µ—â–µ —Ä–∞–∑!"
                    }
                } else {
                    document.getElementById('inp').value = "–ù–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —à–∞–±–ª–æ–Ω–æ–≤"
                }
            } else if (table[l][4] == "") {
                document.getElementById('inp').value = "–ù–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —à–∞–±–ª–æ–Ω–∞"
            } else {
                if (table[l][5] == "–ë—ã—Å—Ç—Ä—ã–π —à–∞–±–ª–æ–Ω") {
                    sendAnswerTemplate2(table[l][6])
                }
                if (table[l][5] == "–¢–µ–∫—Å—Ç") {
                    sendAnswer(transfPageButtons(table[l][6]))
                }
                if (table[l][5] == "–®–∞–±–ª–æ–Ω") {
                    sendAnswerTemplate(table[l][6], table[l][7])
                }
                break
            }
        }
    }
}

async function loadTemplates(template, word) { //–∑–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å –¥–æ–∫–∞
    if (localStorage.getItem('tpflag') == '–¢–ü') {
        return await fetch("https://skyeng.autofaq.ai/api/reason8/autofaq/top/batch", {
            "headers": {
                "content-type": "application/json",
                "x-csrf-token": aftoken
            },
            "body": "{\"query\":\"" + word + "\",\"answersLimit\":10,\"autoFaqServiceIds\":[121286, 119638, 121385, 119843, 118980, 121692, 121386, 119636, 119649, 121381, 119841, 120181, 119646, 121384, 121387, 119844, 119025]}",
            "method": "POST",
        })
            .then(response => response.json())
            .then(result => {
                var documentId = ""
                var serviceId = ""
                var queryId = ""
                var AFsessionId = ""
                var tmpText = ""
                var title = ""
                var accuracy = ""
                for (let i = 0; i < result.length; i++) {
                    if (result[i].title == template) {
                        var b = result[i]
                        documentId = b.documentId
                        serviceId = b.serviceId
                        queryId = b.queryId
                        AFsessionId = b.sessionId
                        tmpText = b.text
                        tmpText = tmpText.split("<br>").join('\n')
                        tmpText = tmpText.split("<br>‚Üµ").join('\n')
                        tmpText = tmpText.split("&nbsp;").join(' ')
                        tmpText = tmpText.split("<br />").join('\n')
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å <p class="TextEditor_Paragraph__68XKv">, –∏ –µ—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ ''
                        if (tmpText.startsWith('<p class="TextEditor_Paragraph__68XKv">')) {
                            tmpText = tmpText.replace('<p class="TextEditor_Paragraph__68XKv">', '');
                        }
                        tmpText = tmpText.split('<p class="TextEditor_Paragraph__68XKv">').join('\n');
                        tmpText = tmpText.split('</p>').join('')
                        tmpText = tmpText.split('<a').join('TMPaTMP').split('</a').join('TMPENDaTMEPEND')
                        tmpText = tmpText.replace(/<\/?[^>]+>/g, '')
                        tmpText = tmpText.split('TMPaTMP').join('<a').split('TMPENDaTMEPEND').join('</a')
                        title = b.title
                        title = title.split("\"").join("\\\"")
                        accuracy = b.accuracy

                        templatesAF.push([template, documentId, serviceId, queryId, AFsessionId, tmpText, title, accuracy])
                        return ([template, documentId, serviceId, queryId, AFsessionId, tmpText, title, accuracy])
                    }
                }
            })
    } else if (localStorage.getItem('tpflag') == '–¢–üPrem') {
        return await fetch("https://skyeng.autofaq.ai/api/reason8/autofaq/top/batch", {
            "headers": {
                "content-type": "application/json",
                "x-csrf-token": aftoken
            },
            "body": "{\"query\":\"" + word + "\",\"answersLimit\":10,\"autoFaqServiceIds\":[121533, 121775, 121527, 121531, 121831]}",
            "method": "POST",
        })
            .then(response => response.json())
            .then(result => {
                var documentId = ""
                var serviceId = ""
                var queryId = ""
                var AFsessionId = ""
                var tmpText = ""
                var title = ""
                var accuracy = ""
                for (let i = 0; i < result.length; i++) {
                    if (result[i].title == template) {
                        var b = result[i]
                        documentId = b.documentId
                        serviceId = b.serviceId
                        queryId = b.queryId
                        AFsessionId = b.sessionId
                        tmpText = b.text
                        tmpText = tmpText.split("<br>").join('\n')
                        tmpText = tmpText.split("<br>‚Üµ").join('\n')
                        tmpText = tmpText.split("&nbsp;").join(' ')
                        tmpText = tmpText.split("<br />").join('\n')
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å <p class="TextEditor_Paragraph__68XKv">, –∏ –µ—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ ''
                        if (tmpText.startsWith('<p class="TextEditor_Paragraph__68XKv">')) {
                            tmpText = tmpText.replace('<p class="TextEditor_Paragraph__68XKv">', '');
                        }
                        tmpText = tmpText.split('<p class="TextEditor_Paragraph__68XKv">').join('\n');
                        tmpText = tmpText.split('</p>').join('')
                        tmpText = tmpText.split('<a').join('TMPaTMP').split('</a').join('TMPENDaTMEPEND')
                        tmpText = tmpText.replace(/<\/?[^>]+>/g, '')
                        tmpText = tmpText.split('TMPaTMP').join('<a').split('TMPENDaTMEPEND').join('</a')
                        title = b.title
                        title = title.split("\"").join("\\\"")
                        accuracy = b.accuracy

                        templatesAF.push([template, documentId, serviceId, queryId, AFsessionId, tmpText, title, accuracy])
                        return ([template, documentId, serviceId, queryId, AFsessionId, tmpText, title, accuracy])
                    }
                }
            })
    }

}

async function sendAnswerTemplate2(word, flag = 0) { //—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ 2
    var tmpTxt = ""
    var adr = `https://skyeng.autofaq.ai/tickets/assigned/`
    if (word.length < 50)
        try {
            a = await fetch("https://skyeng.autofaq.ai/api/reason8/autofaq/top/batch", {
                "headers": {
                    "content-type": "application/json",
                    "x-csrf-token": aftoken
                },
                "referrer": adr,
                "referrerPolicy": "no-referrer-when-downgrade",
                "body": "{\"query\":\"" + word + "\",\"answersLimit\":25,\"autoFaqServiceIds\":[121384]}",
                "method": "POST",
                "mode": "cors",
                "credentials": "include"
            }).then(a => b = a.json()).then(result => result.forEach(k => {
                if (k.title == word)
                    tmpTxt = k.text
            }))
            tmpTxt = tmpTxt.split("<br>‚Üµ").join('\n')
            tmpTxt = tmpTxt.split("&nbsp;").join(' ')
            tmpTxt = tmpTxt.split("<br />").join('\n')
            tmpTxt = tmpTxt.split('<a').join('TMPaTMP').split('</a').join('TMPENDaTMEPEND')
            tmpTxt = tmpTxt.replace(/<\/?[^>]+>/g, '')
            tmpTxt = tmpTxt.split('TMPaTMP').join('<a').split('TMPENDaTMEPEND').join('</a')
        } catch (e) { }
    if (tmpTxt == "")
        tmpTxt = word
    if (document.getElementById('msg1').innerHTML == "–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å" && flag == 0) {
        document.getElementById('inp').value = tmpTxt
        template_flag = 1
        template_flag2 = 1
    } else {
        tmpTxt = tmpTxt.split("\"").join("\\\"")
        tmpTxt2 = tmpTxt.split('\n')
        tmpTxt3 = ""
        tmpTxt2.forEach(el => tmpTxt3 += "<p>" + el + "</p>\\n")
        tmpTxt = tmpTxt3
        tmpTxt = tmpTxt.split('<p></p>').join("<p><br></p>")
        tmpTxt = tmpTxt.substr(0, tmpTxt.length - 2)
        var values = await getInfo(0)
        var adr = values[0]; var adr1 = values[1]; var uid = values[2]
        fetch("https://skyeng.autofaq.ai/api/reason8/answers", {
            "headers": {
                "accept": "*/*",
                "content-type": "multipart/form-data; boundary=----WebKitFormBoundarymasjvc4O46a190zh",
                "sec-fetch-dest": "empty",
                "sec-fetch-mode": "cors",
                "sec-fetch-site": "same-origin",
                "x-csrf-token": aftoken
            },
            "referrer": adr,
            "referrerPolicy": "no-referrer-when-downgrade",
            "body": "------WebKitFormBoundarymasjvc4O46a190zh\r\nContent-Disposition: form-data; name=\"payload\"\r\n\r\n{\"sessionId\":\"" + uid + "\",\"conversationId\":\"" + adr1 + "\",\"text\":\"" + tmpTxt + "\",\"suggestedAnswerDocId\":0}\r\n------WebKitFormBoundarymasjvc4O46a190zh--\r\n",
            "method": "POST",
            "mode": "cors",
            "credentials": "include"
        });
        resetFlags()
        flagggg = 0
    }
}

async function sendAnswerTemplate(template, word, flag = 0, newText = "", flag2 = 0) { // —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞
    var curTemplate
    if (flag == 1) {
        template = template_text
        word = word_text
    }
    for (let i = 0; i < templatesAF.length; i++) {
        if (template == templatesAF[i][0]) {
            curTemplate = templatesAF[i]
            break
        }
    }
    if (curTemplate == undefined)
        curTemplate = await loadTemplates(template, word)

    var documentId = curTemplate[1]
    var serviceId = curTemplate[2]
    var queryId = curTemplate[3]
    var AFsessionId = curTemplate[4]
    var tmpText = transfPageButtons(curTemplate[5])
    var title = curTemplate[6]
    var accuracy = curTemplate[7]
    var values = await getInfo(0)
    var adr = values[0]; var adr1 = values[1]; var uid = values[2]
    if (document.getElementById('msg1').innerHTML === "–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å" && flag2 === 0) {
        document.getElementById('inp').value = tmpText.replace(/\\n/g, '\n');
        template_text = template;
        word_text = word;
        template_flag = 1;
    } else if (tmpText === "") {
        console.log('–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else {
        if (flag === 1) {
            tmpText = newText;
        }

        // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        tmpText = tmpText.replace(/\\/g, '\\\\')
            .replace(/"/g, '\\"')
            .replace(/\n/g, '\\n');

        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ HTML —Ñ–æ—Ä–º–∞—Ç
        const txt2 = tmpText.split('\\n');
        let txt3 = "";
        txt2.forEach(el => txt3 += "<p>" + el + "</p>\\n");
        tmpText = txt3;
        tmpText = tmpText.replace(/<p><\/p>/g, "<p><br></p>");
        tmpText = tmpText.substr(0, tmpText.length - 2);

        resetFlags();

        fetch("https://skyeng.autofaq.ai/api/reason8/answers", {
            headers: {
                "content-type": "multipart/form-data; boundary=----WebKitFormBoundaryZ3ivsA3aU80QEBST",
                "x-csrf-token": aftoken
            },
            body: `------WebKitFormBoundaryZ3ivsA3aU80QEBST\r\nContent-Disposition: form-data; name="payload"\r\n\r\n{"sessionId":"${uid}","conversationId":"${adr1}","text":"${tmpText}","ext":null,"files":[],"suggestedAnswerDocId":${documentId},"autoFaqServiceId":${serviceId},"autoFaqSessionId":"${AFsessionId}","autoFaqQueryId":"${queryId}","autoFaqTitle":"${title}","autoFaqQuery":"${word}","autoFaqAccuracy":${accuracy}}\r\n------WebKitFormBoundaryZ3ivsA3aU80QEBST--\r\n`,
            method: "POST",
            credentials: "include"
        });
    }

}

async function sendAnswer(txt, flag = 1) { //—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    var values = await getInfo(flag)
    var adr = values[0]; var adr1 = values[1]; var uid = values[2]
    var txt2 = txt.split('\n')
    var txt3 = ""
    txt2.forEach(el => txt3 += "<p>" + el + "</p>\\n")
    txt3 = txt3.split("\"").join("\\\"")
    txt3 = txt3.split('<p></p>').join("<p><br></p>")
    txt3 = txt3.substr(0, txt3.length - 2)
    if (document.getElementById('msg1').innerHTML == "–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å" && flag) {
        resetFlags()
        document.getElementById('inp').value = txt
    }
    else {
        fetch("https://skyeng.autofaq.ai/api/reason8/answers", {
            "headers": {
                "content-type": "multipart/form-data; boundary=----WebKitFormBoundaryFeIiMdHaxAteNUHd",
                "x-csrf-token": aftoken
            },
            "body": "------WebKitFormBoundaryFeIiMdHaxAteNUHd\r\nContent-Disposition: form-data; name=\"payload\"\r\n\r\n{\"sessionId\":\"" + uid + "\",\"conversationId\":\"" + adr1 + "\",\"text\":\"" + txt3 + "\"}\r\n------WebKitFormBoundaryFeIiMdHaxAteNUHd--\r\n",
            "method": "POST",
            "credentials": "include"
        });
        resetFlags()
    }
}
// –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∏–∑ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü –∏ –≤ —Ü–µ–ª–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞

let activeTimers = {};
let updateInterval; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

function formatTime(value) {
    return value.toString().padStart(2, '0');
}

function formatISOStringWithoutMillis(date) {
    return date.toISOString().split('.')[0] + '.000Z'; // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ —É–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
}

function updateTimerDisplay(chatHash, timeString) {
    const iframeDoc = document.querySelector('[class^="NEW_FRONTEND__frame"]').contentDocument || document.querySelector('[class^="NEW_FRONTEND__frame"]').contentWindow.document;
    const convElement = iframeDoc.querySelector(`[data-conv-id="${chatHash}"]`);
    if (convElement) {
        let techSupTimeBar = convElement.querySelector('.techSupTimeBar-class');
        if (!techSupTimeBar) {
            techSupTimeBar = document.createElement('div');
            techSupTimeBar.classList.add('techSupTimeBar-class');
            techSupTimeBar.style = "background-color:#31b731; font-weight:700; text-align:center; border-radius:20px; margin-top: 3px;";
            convElement.append(techSupTimeBar);
        }
        techSupTimeBar.textContent = timeString;
    } else {
        //console.error(`Element with data-conv-id="${chatHash}" not found.`);
        if (activeTimers[chatHash]) {
            clearInterval(activeTimers[chatHash]);
            delete activeTimers[chatHash];
        }
    }
}

function startTimerForTimestamp(timestamp, chatHash) {
    const targetTime = new Date(timestamp);
    activeTimers[chatHash] = setInterval(() => {
        const now = new Date();
        const diff = now - targetTime;

        if (diff < 0) {
            clearInterval(activeTimers[chatHash]);
            delete activeTimers[chatHash];
            return;
        }

        const hours = Math.floor(diff / (1000 * 60 * 60));
        const minutes = Math.floor((diff / (1000 * 60)) % 60);
        const seconds = Math.floor((diff / 1000) % 60);
        const timeString = `‚õëÔ∏è ${formatTime(hours)}:${formatTime(minutes)}:${formatTime(seconds)}`;
        updateTimerDisplay(chatHash, timeString);
    }, 1000);
}

async function CountTechSupTimmer() {
    if (location.host.includes('autofaq') == true) {
        if (opsection !== "–¢–ü –û–°" && opsection !== "–¢–ü") {
            console.log("–î–ª—è –Ω–µ –¢–ü –æ—Ç–¥–µ–ª–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!");
            if (updateInterval) {
                clearInterval(updateInterval);
                updateInterval = null;
            }
            return;
        }

        try {
            const now = new Date();
            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è –≤ UTC (21:00 –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è)
            const prevDayStart = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() - 1, 21, 0, 0, 0));
            // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –≤ UTC (20:59:59 —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è)
            const currentDayEnd = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 20, 59, 59, 0));

            const prevDayTime = formatISOStringWithoutMillis(prevDayStart);
            const currentDayTime = formatISOStringWithoutMillis(currentDayEnd);
            console.log("TEST", aftoken)
            const tBodyHistoryTemplates = JSON.stringify({
                serviceId: "361c681b-340a-4e47-9342-c7309e27e7b5",
                mode: "Json",
                participatingOperatorsIds: [operatorId],
                tsFrom: prevDayTime,
                tsTo: currentDayTime,
                usedStatuses: ["AssignedToOperator"],
                orderBy: "ts",
                orderDirection: "Desc",
                page: 1,
                limit: 100
            });

            try {
                // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ doOperationsWithHistory
                const data = await doOperationsWithHistory(tBodyHistoryTemplates);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω—É—Ç—Ä—å —Ñ—É–Ω–∫—Ü–∏–∏ doOperationsWithHistory)
                if (!data || !data.items) throw new Error("Invalid response structure");

                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º conversationIds
                const conversationIds = data.items.map(el => el.conversationId);

                console.log("Conversation IDs:", conversationIds);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:", error);
            }

            const messagesPromises = conversationIds.map(async id => {
                const convResponse = await doOperationsWithConversations(id); // –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                if (!convResponse || !convResponse.data) throw new Error("Invalid response data.");

                return convResponse; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            });

            const conversations = await Promise.all(messagesPromises);
            const massivTimes = conversations.flatMap(conv =>
                conv.messages
                    .filter(el => el.eventTpe === "ChangeGroup" && (el.payload.prevGroup === "b6f7f34d-2f08-fc19-3661-29ac00842898" || el.payload.prevGroup === "7b443078-a05f-4c8f-827b-4db2bf7c5d01")) // –¢–ü - c7bbb211-a217-4ed3-8112-98728dc382d8 ; –ö–¶ - b6f7f34d-2f08-fc19-3661-29ac00842898 ; –ü—Ä–æ–¥ - 7b443078-a05f-4c8f-827b-4db2bf7c5d01
                    .map(message => ({
                        TimeStamp: message.ts,
                        ChatHash: message.conversationId
                    }))
            );

            const iframeDoc = document.querySelector('[class^="NEW_FRONTEND__frame"]').contentDocument || document.querySelector('[class^="NEW_FRONTEND__frame"]').contentWindow.document;
            const Convlist = iframeDoc.querySelectorAll('#__next [class^="DialogsCard_Card"]');

            Convlist.forEach(conv => {
                const chatHash = conv.getAttribute('data-conv-id');
                const massivTime = massivTimes.find(mt => mt.ChatHash === chatHash);
                if (massivTime && !activeTimers[massivTime.ChatHash]) {
                    startTimerForTimestamp(massivTime.TimeStamp, massivTime.ChatHash);
                }
            });
        } catch (error) {
            console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
        }
    }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–π–º–µ—Ä–æ–≤
updateInterval = setInterval(CountTechSupTimmer, 30000);

setInterval(startTimer, 500)

// –ª–æ–≤–∏–º –≤—ã–∑–æ–≤ newTaggg –∏–∑ iframe
window.addEventListener('callNewTaggg', (event) => {
    const tagName = event.detail.tagName;
    newTaggg(tagName);
});

// –ª–æ–≤–∏–º –≤—ã–∑–æ–≤ sendComent –∏–∑ iframe
window.addEventListener('CallNewComment', (event) => {
    const ComemntText = event.detail.comment;
    sendComment(ComemntText);
});




