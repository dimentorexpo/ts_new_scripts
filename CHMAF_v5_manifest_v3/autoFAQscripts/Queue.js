let dataChts;
let timerCountdownToRefresh;
let timerToRefreshInt;
var win_Queue =  // –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–∫–Ω–∞ –ß–∞—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏
    `<div style="display: flex; width: 600px;">
        <span style="width: 600px">
                <span style="cursor: -webkit-grab;">
                        <div style="margin: 5px; width: 600px;">
                                <button class="mainButton buttonHide" id="hideMeQueue">hide</button>
								<span style="color:orange; font-weight:800">–í—Å–µ–≥–æ —á–∞—Ç–æ–≤:</span>
								<span id="waitingCount" style="color:coral; font-weight:800"></span>
                                <span style="color:#00e9a0; font-weight:800">–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑:</span>
                                <span id="timeRestartCount" style="color:coral; font-weight:800"></span>
                        </div>
						<div>
							<select class="${exttheme}" id="AFStatusType" style="margin-left:220px; margin-top:10px;">
								<option value="AssignedToOperator">–í —Ä–∞–±–æ—Ç–µ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</option>
								<option value="OnOperator">–í –æ—á–µ—Ä–µ–¥–∏</option>
								<option value="ClosedByOperator">–ó–∞–∫—Ä—ã—Ç—ã–µ</option>
								<option value="ClosedByOperatorWithBot">–ó–∞–∫—Ä—ã—Ç—ã–µ —Å –±–æ—Ç–æ–º</option>
							</select>
						</div>
						<div>
							<textarea class="${exttheme}" id="inputTextForUser" style="margin-left: 16.5%;; width: 400px; height: 56px;" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"></textarea>
						</div>

						<div style="display:flex; justify-content:space-evenly; padding-bottom:5px">
							<button class="mainButton" title="–ù–∞–π—Ç–∏ —á–∞—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é" id="checkQueue" style="position:relative;">üîé Check Queue</button>
							<button class="mainButton" title="–≤–∑—è—Ç—å —á–∞—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—Ä–∞—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —É—Å–ø–µ—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å AFRT" id="getChatFromQueue">üìù Write them ALL</button>
						</div>
				</span>
						<div id="queueData" style="max-height: 600px; overflow-y: auto;">
						</div>
        </span>
</div>`;

const wintQueue = createWindow('AF_Queue', 'winTopQueue', 'winLeftQueue', win_Queue);
hideWindowOnDoubleClick('AF_Queue');

document.getElementById('hideMeQueue').addEventListener('click', function () { // —Å–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã
    let bimba = document.getElementById('queueData');
    let queueCnt = document.getElementById('waitingCount')
    bimba.innerHTML = "";
    queueCnt.innerHTML = ""
    if (document.getElementById('AF_Queue').style.display == '') {
        document.getElementById('AF_Queue').style.display = 'none';
        document.getElementById('cardInfoData').innerText = "";
        document.getElementById('carddigits').value = "";
    }
    clearInterval(timerCountdownToRefresh)
    clearInterval(timerToRefreshInt)
    console.log("All intervals for Queue were removed successfully")
})

function getQueuePress() {
    if (document.getElementById('AF_Queue').style.display == '') {
        document.getElementById('AF_Queue').style.display = 'none'
        document.getElementById('idmymenu').style.display = 'none'
        document.getElementById('MainMenuBtn').classList.remove('activeScriptBtn')
    } else {
        document.getElementById('AF_Queue').style.display = ''
        document.getElementById('MainMenuBtn').classList.remove('activeScriptBtn')
        document.getElementById('idmymenu').style.display = 'none'
        waitingCount.innerHTML = ""
        getAllChatsByStatus()
        let timerOutput = document.getElementById('timeRestartCount');
        let timerTime = 9;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        timerCountdownToRefresh = setInterval(() => {
            timerOutput.textContent = timerTime--;
            if (timerTime === -1) timerTime = 9;
        }, 1000);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        timerToRefreshInt = setInterval(() => {
            getAllChatsByStatus();
        }, 10000);
    }
}

function updateTimer(startTime, element) {
    let start = new Date(startTime);
    let now = new Date();
    let diff = now - start;

    let hours = Math.floor(diff / (1000 * 60 * 60));
    diff -= hours * (1000 * 60 * 60);
    let minutes = Math.floor(diff / (1000 * 60));
    diff -= minutes * (1000 * 60);
    let seconds = Math.floor(diff / (1000));

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
    hours = (hours < 10) ? '0' + hours : hours;
    minutes = (minutes < 10) ? '0' + minutes : minutes;
    seconds = (seconds < 10) ? '0' + seconds : seconds;

    element.textContent = `${hours}:${minutes}:${seconds}`;

    if (hours == "00" && minutes == "00" && seconds <= 60) {
        element.style = "color:#f9ff00; font-weight:700"
    } else {
        element.style.color = ""
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞
function startTimerForDialog(startTime, element) {
    updateTimer(startTime, element); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Å—Ä–∞–∑—É
    setInterval(function () {
        updateTimer(startTime, element); // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    }, 1000);
}

async function fetchAllPages(url, initialBodyContent) {
    let allData = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    let page = 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    let totalFetched = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    let totalAvailable; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π

    do {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        const bodyContent = { ...initialBodyContent, page, limit: 100 };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        const response = await fetch(url, {
            headers: {
                "content-type": "application/json",
                "x-csrf-token": aftoken
            },
            referrer: "https://skyeng.autofaq.ai/logs",
            referrerPolicy: "strict-origin-when-cross-origin",
            body: JSON.stringify(bodyContent),
            method: "POST",
            mode: "cors",
            credentials: "include"
        });

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –æ–±—â–µ–º—É –º–∞—Å—Å–∏–≤—É
        const data = await response.json();
        allData = allData.concat(data.items);
        totalFetched += data.items.length;

        // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —É–∑–Ω–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if (page === 1) {
            totalAvailable = data.total;
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        page++;
    } while (totalFetched < totalAvailable); // –ü–æ–≤—Ç–æ—Ä—è–µ–º, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    return allData; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
}

function takeOnMe(chatID) {

    let chat_id = chatID;
    let operator_id = operatorId;

    const assignChat = (assignToOperatorId) => {
        fetch("https://skyeng.autofaq.ai/api/conversation/assign", {
            headers: { "content-type": "application/json", "x-csrf-token": aftoken },
            credentials: "include",
            body: JSON.stringify({
                command: "DO_ASSIGN_CONVERSATION",
                conversationId: chat_id,
                assignToOperatorId: assignToOperatorId
            }),
            method: "POST"
        });
    };

    assignChat("null");
    setTimeout(() => assignChat(operator_id), 2000);

};// –∫–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–∞—Ç—å"

let getOptions = document.getElementById('AFStatusType')
async function getAllChatsByStatus() {
    let bimba = document.getElementById('queueData');
    let queueCnt = document.getElementById('waitingCount')
    bimba.innerHTML = "";
    queueCnt.innerHTML = ""
    let statusToFetch;
    for (let i = 0; i < getOptions.children.length; i++) {
        if (getOptions.children[i].selected == true) {
            statusToFetch = getOptions.children[i].value
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ UTC
    // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ UTC
    const now = new Date(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
    const mskOffset = 3 * 60 * 60 * 1000; // –°–º–µ—â–µ–Ω–∏–µ –ú–æ—Å–∫–≤—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (UTC+3)

    // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ
    const mskTime = new Date(now.getTime() + mskOffset);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ tsFrom –∏ tsTo —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤ –ú–æ—Å–∫–≤–µ
    let tsFrom, tsTo;
    if (mskTime.getUTCHours() < 21) {
        // –ï—Å–ª–∏ –≤ –ú–æ—Å–∫–≤–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ 21:00 UTC, –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
        tsFrom = new Date(Date.UTC(mskTime.getUTCFullYear(), mskTime.getUTCMonth(), mskTime.getUTCDate() - 1, 21, 0, 0, 0)).toISOString();
        tsTo = new Date(Date.UTC(mskTime.getUTCFullYear(), mskTime.getUTCMonth(), mskTime.getUTCDate(), 20, 59, 59, 59)).toISOString();
    } else {
        // –ï—Å–ª–∏ –≤ –ú–æ—Å–∫–≤–µ —É–∂–µ –ø—Ä–æ—à–ª–æ 21:00 UTC, –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        tsFrom = new Date(Date.UTC(mskTime.getUTCFullYear(), mskTime.getUTCMonth(), mskTime.getUTCDate() - 1, 21, 0, 0, 0)).toISOString();
        tsTo = new Date(Date.UTC(mskTime.getUTCFullYear(), mskTime.getUTCMonth(), mskTime.getUTCDate(), 20, 59, 59, 59)).toISOString();
    }

    console.log(tsFrom);
    console.log(tsTo);

    let setgroupList = '';
    if (opsection == "–¢–ü" || opsection == "–¢–ü –û–°") {
        setgroupList = "c7bbb211-a217-4ed3-8112-98728dc382d8"
    } else {
        setgroupList = "b6f7f34d-2f08-fc19-3661-29ac00842898"
    }

    // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    const initialBodyContent = {
        serviceId: "361c681b-340a-4e47-9342-c7309e27e7b5",
        mode: "Json",
        groupList: [setgroupList], // –¢–ü
        // groupList: ["b6f7f34d-2f08-fc19-3661-29ac00842898"], // –ö–¶
        tsFrom: tsFrom,
        tsTo: tsTo,
        usedStatuses: [statusToFetch],
        orderBy: "ts",
        orderDirection: "Desc",
        limit: 100 // –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ—É–Ω–∫—Ü–∏–∏ fetchAllPages
    };

    await fetchAllPages("https://skyeng.autofaq.ai/api/conversations/history", initialBodyContent, { headers: { "x-csrf-token": aftoken } })
        .then(allData => {
            console.log(allData.length); // –í—ã–≤–æ–¥–∏—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å allData –∫–∞–∫ —É–≥–æ–¥–Ω–æ
            dataChts = allData
            queueCnt.textContent = `${dataChts.length}`;
        })
        .catch(error => {
            console.log('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ', error);
        });

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    dataChts.forEach((el, index) => {
        let tsConverter = el.ts.replace(/\[GMT\]$/, '');
        let dateToMSK = new Date(tsConverter);

        // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—á–µ—Ä–µ–¥–∏
        let queueItemDiv = document.createElement('div');
        queueItemDiv.className = 'queue-item';
        queueItemDiv.setAttribute('name', 'prosmChat')

        let timeSpan = document.createElement('span');
        timeSpan.style = 'color:#0be90b; font-weight:700; text-shadow: 1px 2px 5px rgba(0, 0, 0, 0.55);';
        timeSpan.textContent = dateToMSK.toLocaleTimeString('ru-RU', { timeZone: 'Europe/Moscow', hour12: false, hour: '2-digit', minute: '2-digit', second: '2-digit' });

        let usrName = document.createElement('span');
        usrName.style.color = "bisque";
        usrName.textContent = el.channelUser.fullName ? el.channelUser.fullName : "Noname"
        // usrName.setAttribute('name', 'prosmChat')

        let usrType = document.createElement('span')
        if (el.channelUser.payload && el.channelUser.payload.userType) {
            if (el.channelUser.payload.userType == "teacher") {
                usrType.textContent = "üëΩ"; // –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            } else if (el.channelUser.payload.userType == "student" || el.channelUser.payload.userType == "parent") {
                usrType.textContent = "üë®‚Äçüéì"; // –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
            } else {
                usrType.textContent = "‚ùì"; // –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
        } else {
            usrType.textContent = "‚ùì"; // –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }

        let timerSpan = document.createElement('span');
        timerSpan.id = 'timer-' + index;
        timerSpan.className = 'timer';

        let checkFirstAnswer = document.createElement('span');
        checkFirstAnswer.setAttribute('name', 'flagOfFirstAnswer')
        if (el.stats.participatingOperators.includes("autoFAQ")) {
            // –ï—Å–ª–∏ autoFAQ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç
            checkFirstAnswer.textContent = el.stats.firstOperatorAnswerTime ? "‚úÖ" : "‚ùå";
        } else if (el.stats.participatingOperators.length > 0) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, –Ω–æ –Ω–µ—Ç autoFAQ
            checkFirstAnswer.textContent = "‚§¥Ô∏è";
        } else {
            // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç –≤–æ–æ–±—â–µ
            checkFirstAnswer.textContent = "üö´";
        }

        let countryInfo = document.createElement('span')
        countryInfo.style = "color:bisque"
        if (el.channelUser.payload && el.channelUser.payload.country) {
            countryInfo.textContent = el.channelUser.payload.country
        } else {
            countryInfo.textContent = "‚ûñ"
        }


        let getThisChat = document.createElement('button');
        getThisChat.className = 'mainButton';
        getThisChat.name = 'assignToMe';
        getThisChat.title = "–ó–∞–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç";
        getThisChat.textContent = 'ü´≥';

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ queueItemDiv
        queueItemDiv.appendChild(timeSpan);
        queueItemDiv.appendChild(usrType);
        queueItemDiv.appendChild(usrName);
        queueItemDiv.appendChild(timerSpan);
        queueItemDiv.appendChild(checkFirstAnswer);
        queueItemDiv.appendChild(countryInfo);
        queueItemDiv.appendChild(getThisChat);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ queueItemDiv –≤ bimba
        bimba.appendChild(queueItemDiv);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞
        startTimerForDialog(tsConverter, timerSpan);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
    let allConvs = document.getElementsByName('prosmChat');
    for (let i = 0; i < allConvs.length; i++) {
        allConvs[i].addEventListener('click', function () {
            if (document.getElementById('AF_ChatHis').style.display == 'none') {
                document.getElementById('opennewcat').click();
                document.getElementById('hashchathis').value = dataChts[i].conversationId;
                btn_search_history.click();
            } else {
                document.getElementById('hashchathis').value = dataChts[i].conversationId;
                btn_search_history.click();
            }
        });
    }

    let allAssignBtns = document.getElementsByName('assignToMe')
    for (let z = 0; z < allAssignBtns.length; z++) {
        allAssignBtns[z].addEventListener('click', function (event) {
            event.stopPropagation();
            takeOnMe(dataChts[z].conversationId)
            console.log(dataChts[z].conversationId)
        })
    }

};

async function writeThemAll() {
    if (dataChts.length > 0) {
        console.log(dataChts)
        let allFlags = document.getElementsByName('flagOfFirstAnswer')

        for (let i = 0; i < allFlags.length; i++) {
            if (allFlags[i].textContent == "‚ùå") {
                let getTextAreaValue = document.getElementById('inputTextForUser').value
                if (getTextAreaValue == "") {
                    createAndShowButton('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–ª–µ –Ω–∏–∂–µ!', 'error')
                } else {
                    fetch("https://skyeng.autofaq.ai/api/reason8/answers", {
                        "headers": {
                            "content-type": "multipart/form-data; boundary=----WebKitFormBoundaryH2CK1t5M3Dc3ziNW",
                            "sec-fetch-mode": "cors",
                            "sec-fetch-site": "same-origin",
                            "x-csrf-token": aftoken
                        },
                        "referrerPolicy": "strict-origin-when-cross-origin",
                        "body": `------WebKitFormBoundaryH2CK1t5M3Dc3ziNW\r\nContent-Disposition: form-data; name=\"payload\"\r\n\r\n{\"sessionId\":\"${dataChts[i].stats.conversationSessionId}\",\"conversationId\":\"${dataChts[i].conversationId}\",\"text\":\"${getTextAreaValue}\",\"isComment\":false}\r\n------WebKitFormBoundaryH2CK1t5M3Dc3ziNW--\r\n`,
                        "method": "POST",
                        "mode": "cors",
                        "credentials": "include"
                    });
                    allFlags[i].textContent = "‚úÖ"
                }
            } else {
                console.log(dataChts[i].conversationId, "–ß–∞—Ç –∏—Å—Ö–æ–¥—è—â–∏–π –∏–ª–∏ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ –µ—Å—Ç—å, —Å–±–∏–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä AFRT –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏!")
            }
        }

    } else {
        console.log("No parsed data please parse chats first")
    }
}

document.getElementById('checkQueue').addEventListener('click', getAllChatsByStatus)
document.getElementById('getChatFromQueue').addEventListener('click', writeThemAll)

getOptions.addEventListener('change', getAllChatsByStatus)

