function addbuttonhesh() {
    let headers = document.querySelectorAll(".header");

    headers.forEach(headarea => {
        if (headarea.innerText == "–£—Ä–æ–∫–∏" && !headarea.querySelector("#reactcachebtn")) {
            let reactcachebtn = document.createElement('span');
            reactcachebtn.id = "reactcachebtn";
            reactcachebtn.textContent = "üë®‚Äçüë©‚Äçüëß‚Äçüë¶";
            reactcachebtn.style = 'cursor: pointer; right: 15px; position: absolute;';
            reactcachebtn.title = "–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫—ç—à, –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É—Ä–æ–∫–æ–≤";
            headarea.appendChild(reactcachebtn);
            reactcachebtn.onclick = ClearReactCashe;
        }
    });
}

const observer = new MutationObserver(mutations => {
    mutations.forEach(mutation => {
        if (mutation.addedNodes.length || mutation.type === 'childList') {
            addbuttonhesh();
        }
    });
});

observer.observe(document.body, {
    childList: true,
    subtree: true
});


function getTeachToken() {
    const tokenPrefix = 'token_global=';
    return document.cookie.split(';')
        .map(cookie => cookie.trim())
        .find(cookie => cookie.startsWith(tokenPrefix))
        ?.substring(tokenPrefix.length);
}


function ClearReactCashe() {
    let myToken = getTeachToken();
    if (!myToken) {
        console.error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const urlBase = 'https://academic-gateway.skyeng.ru/academic/api/teacher-classroom/get-data/';
    const urlSegments = document.URL.split('/');
    const urlmatches = ['personal', 'parallel', 'group', 'webinar'];
    const currentSegment = urlSegments[7];

    if (urlmatches.includes(currentSegment)) {
        let fullUrl = urlBase + currentSegment;
        console.log(fullUrl);

        fetch(fullUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${myToken}`
            },
            body: JSON.stringify({ refreshCache: 1 })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('–°–µ—Ç–µ–≤–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–µ—É–¥–∞—á–Ω—ã–º');
                }
                return response.json();
            })
            .then(data => {
                console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
            })
            .catch(error => {
                console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
            });
    } else {
        console.error('–°–µ–≥–º–µ–Ω—Ç URL –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.');
    }
}