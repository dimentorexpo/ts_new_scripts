const Messanger_API_URL = "https://mm-time.skyeng.tech/api/v4/posts";
const OperId_API_URL = "https://mm-time.skyeng.tech/api/v4/users/me";
let MMostOperId ='';
const taskUrlPattern = "https://crm2.skyeng.ru/customer-support/task/*";
const personTaskUrlPattern = "https://crm2.skyeng.ru/persons/*/customer-support/task/*";
const ListTaskUrlPattern = "https://crm2.skyeng.ru/persons/*/customer-support/list";
const showForPages = ["*://*.skyeng.ru/*","*://skyeng.autofaq.ai/*"];
const ChanelDev = "hg8rcub4pfg3dcae8jxkwzkq9h";
const ChanelSupport = "pspyooisr3rd7qzx9as8uc96xc";
let lastChatId = null; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ chatid
let lastMessage = null; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const main = chrome.contextMenus.create({"id":"mainoption","title": "Technical Support Master", "documentUrlPatterns":showForPages});

chrome.contextMenus.create({"id": "searchPaymentId", "title": "üí∏ –ü–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞", "contexts":["page"], "parentId": "mainoption"});
chrome.contextMenus.create({"id": "balanceInfoId", "title": "üí∞ –ù–∞—á–∏—Å–ª—è—Ç–æ—Ä / üìë –ü–æ–¥–ø–∏—Å–∫–∏", "contexts":["page"], "parentId": "mainoption"});
chrome.contextMenus.create({"id": "certAndPromoId", "title": "üßæ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã / üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã", "contexts":["page"], "parentId": "mainoption"});
chrome.contextMenus.create({"id": "opentTTId", "title": "üìü Timetable", "contexts":["page"], "parentId": "mainoption"});
chrome.contextMenus.create({"id": "openCalendarId", "title": "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å (Datsy)", "contexts":["page"], "parentId": "mainoption"});
chrome.contextMenus.create({"id": "makeCompensId", "title": "üíµ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏", "contexts":["page"], "parentId": "mainoption"});
chrome.contextMenus.create({"id": "openTalksAdminId", "title": "üíã –ê–¥–º–∏–Ω–∫–∞ Talks", "contexts":["page"], "parentId": "mainoption"});
chrome.contextMenus.create({"id": "sendToDisasterId", "title": "üÜò #dev-disaster", "contexts":["page"], "parentId": "mainoption"});

const selmain = chrome.contextMenus.create({"id":"selMainOption","title": "Technical Support Master", "contexts":["selection"], "documentUrlPatterns":showForPages, "visible": false});

chrome.contextMenus.create({"id": "InfoID", "title": "üîéInfo ID: %s", "contexts": ["selection"], "parentId": selmain, "visible": false});
chrome.contextMenus.create({"id": "LoginerLinkID", "title": "üè° –°—Å—ã–ª–∫–∞-–ª–æ–≥–∏–Ω–µ—Ä –¥–ª—è ID: %s", "contexts": ["selection"], "parentId": selmain, "visible": false});
chrome.contextMenus.create({"id": "openCRMId", "title": "üïµÔ∏è‚Äç‚ôÇÔ∏è –û—Ç–∫—Ä—ã—Ç—å CRM –¥–ª—è ID: %s", "contexts": ["selection"], "parentId": selmain, "visible": false});
chrome.contextMenus.create({"id": "PartialPaymentId", "title": "üí≥ –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—Ä–æ—á–µ–∫ –¥–ª—è ID: %s", "contexts": ["selection"], "parentId": selmain, "visible": false});
chrome.contextMenus.create({"id": "editAdminId", "title": "üÜî –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ ID: %s", "contexts": ["selection"], "parentId": selmain, "visible": false});
chrome.contextMenus.create({"id": "serviceSkipId", "title": "üí® ID –£—Å–ª—É–≥–∏ Skip –ê–ü", "contexts": ["selection"], "parentId": selmain, "visible": false});
chrome.contextMenus.create({"id": "skpiOnboaringId", "title": "üí® ID –£—Å–ª—É–≥–∏ Skip Onboarding", "contexts": ["selection"], "parentId": selmain, "visible": false});
chrome.contextMenus.create({"id": "openTRM2Id", "title": "üë®‚Äçüè´ –û—Ç–∫—Ä—ã—Ç—å –¢–†–ú2.0 ID: %s", "contexts": ["selection"], "parentId": selmain, "visible": false});
chrome.contextMenus.create({"id": "openGroupAdminId", "title": "üë©‚Äçüëß‚Äçüëß –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É –≥—Ä—É–ø–ø—ã: %s", "contexts": ["selection"], "parentId": selmain, "visible": false});

const hashMenuId = chrome.contextMenus.create({"id": "openByHashId", "title": "‚ôê –û—Ç–∫—Ä—ã—Ç—å –¢–® –ø–æ —Ö–µ—à—É: %s", "contexts": ["selection"], "parentId": selmain, "visible": false});

chrome.runtime.onMessage.addListener(function(message) {
    switch (message.type) {
        case 'NUMERIC_SELECTION':
            chrome.contextMenus.update(selmain, {visible: true});
            chrome.contextMenus.update("InfoID", {visible: true});
            chrome.contextMenus.update("LoginerLinkID", {visible: true});
            chrome.contextMenus.update("openCRMId", {visible: true});
            chrome.contextMenus.update("PartialPaymentId", {visible: true});
            chrome.contextMenus.update("editAdminId", {visible: true});
            chrome.contextMenus.update("serviceSkipId", {visible: true});
            chrome.contextMenus.update("skpiOnboaringId", {visible: true});
            chrome.contextMenus.update("openTRM2Id", {visible: true});
            chrome.contextMenus.update("openGroupAdminId", {visible: true});
            chrome.contextMenus.update(hashMenuId, {visible: false});
            break;
        case 'HASH_SELECTION':
            chrome.contextMenus.update(selmain, {visible: true});
            chrome.contextMenus.update(hashMenuId, {visible: true});
            chrome.contextMenus.update("InfoID", {visible: false});
            chrome.contextMenus.update("LoginerLinkID", {visible: false});
            chrome.contextMenus.update("openCRMId", {visible: false});
            chrome.contextMenus.update("PartialPaymentId", {visible: false});
            chrome.contextMenus.update("editAdminId", {visible: false});
            chrome.contextMenus.update("serviceSkipId", {visible: false});
            chrome.contextMenus.update("skpiOnboaringId", {visible: false});
            chrome.contextMenus.update("openTRM2Id", {visible: false});
            chrome.contextMenus.update("openGroupAdminId", {visible: false});
            break;
        default:
            chrome.contextMenus.update(selmain, {visible: false});
            chrome.contextMenus.update("InfoID", {visible: false});
            chrome.contextMenus.update("LoginerLinkID", {visible: false});
            chrome.contextMenus.update("openCRMId", {visible: false});
            chrome.contextMenus.update("PartialPaymentId", {visible: false});
            chrome.contextMenus.update("editAdminId", {visible: false});
            chrome.contextMenus.update("serviceSkipId", {visible: false});
            chrome.contextMenus.update("skpiOnboaringId", {visible: false});
            chrome.contextMenus.update("openTRM2Id", {visible: false});
            chrome.contextMenus.update("openGroupAdminId", {visible: false});
            chrome.contextMenus.update(hashMenuId, {visible: false});
            break;
    }
});

const linkparent = chrome.contextMenus.create( {"id":"linkOption","title": "Technical Support Master", "contexts":["link"], "documentUrlPatterns":showForPages, "targetUrlPatterns": [taskUrlPattern, personTaskUrlPattern, ListTaskUrlPattern]} ); // –æ–±—å—è–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—á–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ selection

chrome.contextMenus.create({"id": "cancel1linebaseId", "title": "üö´ –û—Ç–º–µ–Ω–∞ –¢–ü1–õ (–∏—Å—Ö–æ–¥)", "contexts":["link"], "parentId": "linkOption", "targetUrlPatterns": [taskUrlPattern, personTaskUrlPattern, ListTaskUrlPattern]}); //–æ–ø—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è test msg
chrome.contextMenus.create({"id": "cancel1linewithtextId", "title": "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –¢–ü1–õ (–∏—Å—Ö–æ–¥) —Å–æ —Å—Å—ã–ª–∫–æ–π", "contexts":["link"], "parentId": "linkOption", "targetUrlPatterns": [taskUrlPattern, personTaskUrlPattern, ListTaskUrlPattern]}); //–æ–ø—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è test msg
chrome.contextMenus.create({"id": "cancel2linewithtextId", "title": "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å 2–õ–¢–ü —Å–æ —Å—Å—ã–ª–∫–æ–π", "contexts":["link"], "parentId": "linkOption", "targetUrlPatterns": [taskUrlPattern, personTaskUrlPattern, ListTaskUrlPattern]}); //–æ–ø—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è test msg
chrome.contextMenus.create({"id": "cancel2linebaseId", "title": "üö´ –û—Ç–º–µ–Ω–∞ 2–õ–¢–ü", "contexts":["link"], "parentId": "linkOption", "targetUrlPatterns": [taskUrlPattern, personTaskUrlPattern, ListTaskUrlPattern]}); //–æ–ø—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è test msg

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤
chrome.contextMenus.onClicked.addListener((info, tab) => {
    switch(info.menuItemId) {
        case "searchPaymentId":
            searchpayment(info, tab);
            break;
        case "balanceInfoId":
            balanceinfo(info, tab);
            break;
		case "certAndPromoId":
			certandpromo(info, tab);
			break;	
		case "opentTTId":
			certandpromo(info, tab);
			break;
		case "openCalendarId":
			opencalendar(info, tab);
			break;
		case "makeCompensId":
			makecompens(info, tab);
			break;
		case "openTalksAdminId":
			opentalksadm(info, tab);
			break;
		case "sendToDisasterId":
			sendtodisaster(info, tab);
			break;	
		case "InfoID":
			openinfo(info, tab);
			break;
		case "LoginerLinkID":
			dologginer(info, tab);
			break;
		case "openCRMId":
			opencrmid(info, tab);
			break;
		case "PartialPaymentId":
			creditpayments(info, tab);
			break;
		case "editAdminId":
			editadmacc(info, tab);
			break;	
		case "serviceSkipId":
			copytoskipap(info, tab);
			break;	
		case "skpiOnboaringId":
			copytoskipob(info, tab);
			break;
		case "openTRM2Id":
			opentrm(info, tab);
			break;	
		case "openGroupAdminId":
			openlgs(info, tab);
			break;	
		case "openByHashId":
			opntshash(info, tab);
			break;
		case "cancel1linebaseId":
			cancelishodcall(info, tab);
			break;	
		case "cancel1linewithtextId":
			sendtestmsgcustommsg(info, tab);
			break;
		case "cancel2linebaseId":
			cancelsecondline(info, tab);
			break;	
		case "cancel2linewithtextId":
			send2ndlinetestmsgcustommsg(info, tab);
			break;

    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
function searchpayment(info, tab) { //–æ–ø—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞
    const createProperties = {url: encodeURI("https://accounting.skyeng.ru/userpayment/search/transaction")};
    chrome.tabs.create(createProperties);
}

function balanceinfo(info, tab) { //–æ–ø—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ù–∞—á–∏—Å–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
    const createProperties = {url: encodeURI("https://billing-api.skyeng.ru/operations")};
    chrome.tabs.create(createProperties);
}

function certandpromo(info, tab){ //–æ–ø—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º –∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
	const createProperties = {url: encodeURI("https://billing-marketing.skyeng.ru/certificate/certSearch")};
	chrome.tabs.create(createProperties);
}

function opentt(info, tab){ // –æ–ø—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª Timetable
	const createProperties = {url: encodeURI("https://timetable.skyeng.ru/")};
	chrome.tabs.create(createProperties);
}

function opencalendar(info, tab){ // –æ–ø—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç datsy.info
	const createProperties = {url: encodeURI("https://datsy.info/")};
	chrome.tabs.create(createProperties);
}

function makecompens(info, tab){ // –æ–ø—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–∞–π—Ç —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
	const createProperties = {url: encodeURI("https://billing-marketing.skyeng.ru/accrual-operations/create")};
	chrome.tabs.create(createProperties);
}

function opentalksadm(info, tab){ // –æ–ø—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∫—É Talks
	const createProperties = {url: encodeURI("https://vimbox.skyeng.ru/talks/admin/statistics")};
	chrome.tabs.create(createProperties);
}

async function sendtodisaster(info, tab){ // –æ–ø—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∑–∞—Å—Ç–µ—Ä –∫–∞–Ω–∞–ª
   if (!MMostOperId) { 
        MMostOperId = await getMMostOperId();
    }

    let answersend = confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–±—É–¥–∏—Ç—å –î—Ä–µ–≤–Ω–µ–µ –ó–ª–æ –∏ –≤–æ–∑–∑–≤–∞—Ç—å –∫ –∫–æ–º–∞–Ω–¥–µ –§–∏–∫—Å–∏–∫–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–∫–ª–∏–∑–º–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ?\n–û–ö - –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è. –û—Ç–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É.");
    if (!answersend) return console.log("–ù–µ —É–≤–µ—Ä–µ–Ω, –∂–∞–ª—å, –ø–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑!");

    const textmsg = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –≤ —ç—Ç–æ –ø–æ–ª–µ');
    if (!textmsg || textmsg.length <= 3) {
        return alert("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π");
    }

    try {
        let response = await sendFetchMessage(`:allert: ${textmsg}`, ChanelDev);
        let tsresponse = response.id;
        console.log(tsresponse);

        await sendFetchMessage(`@techsupport-team @techsupport-leads @tech-curators @pk-chats @sos-inform-teachers @teacherscareteam @outbound-team-new @m-vhod @pm-team1 @premium-support @a-players @news`, ChanelDev, tsresponse);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ", error);
    }
}

async function sendFetchMessage(message, channelId, rootId = "") {
    const headers = {
        "accept": "*/*",
        "accept-language": "ru",
        "content-type": "application/json",
        "sec-fetch-mode": "cors",
        "sec-fetch-site": "same-origin",
        "x-requested-with": "XMLHttpRequest"
    };

    const bodyData = {
        "message": message,
        "channel_id": channelId,
        "pending_post_id": `${MMostOperId}:`,
        "user_id": MMostOperId
    };

    if (rootId) bodyData.root_id = rootId;

    const response = await fetch(Messanger_API_URL, {
        headers,
        "referrerPolicy": "no-referrer",
        "body": JSON.stringify(bodyData),
        "method": "POST",
        "mode": "cors",
        "credentials": "include"
    });

    return await response.json();
}	

function openinfo(info, tab){ // –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ scriptPackage
	let selid = info.selectionText.replace(/\D/g, '');
    console.log(selid)
    const laserExtensionId = "kggpdmfnfmmkneemhknlojemcjmdlpjb";
    let messageValue = {
        message: 'open-user-info',
        userId: selid,
    }
    console.log(messageValue)

    let tabId = tab.id
    console.log(tabId)

    const message = {
        messageValue,
        tabId
    }

    chrome.runtime.sendMessage(laserExtensionId,
        message,
    );
} 

function extractLoginLink(text) {
    const regex = /https:\/\/id\.skyeng\.ru\/auth\/login-link\/\S+/g;
    let matches = text.match(regex);
    if (matches && matches.length) {
        let lastMatch = matches[matches.length - 1];
        return lastMatch.replace(/["']+$/, '');
    }
    return null;
}

function dologginer(info, tab) { // —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ª–æ–≥–∏–Ω–µ—Ä–∞
    let selid = info.selectionText.replace(/\D/g, '');
    let tokenId = null; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å

    fetch("https://id.skyeng.ru/admin/auth/login-links", {
        headers: {"content-type": "application/x-www-form-urlencoded"},
        referrer: "https://id.skyeng.ru/admin/auth/login-links",
        referrerPolicy: "strict-origin-when-cross-origin",
        body: `login_link_form%5Bidentity%5D=&login_link_form%5Bid%5D=${selid}&login_link_form%5Btarget%5D=https%3A%2F%2Fskyeng.ru&login_link_form%5Bpromocode%5D=&login_link_form%5Blifetime%5D=3600&login_link_form%5Bcreate%5D=&login_link_form%5B_token%5D=${tokenId}`,
        method: "POST",
        mode: "cors",
        credentials: "include"
    })
    .then(res => res.text())
    .then(textHtml => {
        const loginLink = extractLoginLink(textHtml);
        if (loginLink) {
            console.log(`Loginner: ${loginLink}`);
            chrome.tabs.sendMessage(tab.id, { action: "copyToClipboard", text: loginLink });
        } else {
            console.error('–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    });
}

function opencrmid(info, tab){ //–æ—Ç–∫—Ä—ã—Ç–∏–µ –°–†–ú–∫–∏ –ø–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	let selid = info.selectionText.replace(/\D/g, '');
	const createProperties = { url: encodeURI("https://crm2.skyeng.ru/persons/" + selid) };
	chrome.tabs.create(createProperties);
}

function creditpayments(info, tab){ //–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å—Å—Ä–æ—á–µ–∫ –ø–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
	let selid = info.selectionText.replace(/\D/g, '');
	const createProperties = { url: encodeURI("https://accounting.skyeng.ru/credit/list?studentId=" + selid) };
	chrome.tabs.create(createProperties);
}

function editadmacc(info, tab){ //–æ—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω–∫–∏ –ø–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	let selid = info.selectionText.replace(/\D/g, '');
	const createProperties = { url: encodeURI("https://id.skyeng.ru/admin/users/" + selid + "/update-contacts") };
	chrome.tabs.create(createProperties);
}

function copytoskipap(info, tab) { // –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ê–ü
    let selid = info.selectionText.replace(/\D/g, '');
    let textToCopy = "https://student.skyeng.ru/product-stage?stage=auto-schedule&educationServiceId=" + selid;
	chrome.tabs.sendMessage(tab.id, { action: "copyToClipboard", text: textToCopy });
	
}

function copytoskipob(info, tab) { // –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ Onboarding
    let selid = info.selectionText.replace(/\D/g, '');
    let textToCopy = "https://student.skyeng.ru/product-stage?stage=onboarding&educationServiceId=" + selid;
	chrome.tabs.sendMessage(tab.id, { action: "copyToClipboard", text: textToCopy });
}

function opentrm(info, tab){ //–æ–ø—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è TRM2
	let selid = info.selectionText.replace(/\D/g, '');
	const createProperties = { url: encodeURI("https://trm.skyeng.ru/teacher/"  +  selid) }
	chrome.tabs.create(createProperties);
}

function openlgs(info, tab){ //–æ–ø—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è LGS
	let selid = info.selectionText.replace(/\D/g, '');
	const createProperties = { url: encodeURI("https://learning-groups-storage.skyeng.ru/group/"  +  selid + "?cp=(section:participants)") }
	chrome.tabs.create(createProperties);
}

function opntshash(info, tab){ //–æ–ø—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¢–® –ø–æ —Ö—ç—à –∫–æ–º–Ω–∞—Ç—ã
const createProperties = { url: encodeURI("https://video-trouble-shooter.skyeng.ru/?hash="  +  info.selectionText) }
	chrome.tabs.create(createProperties);
}

async function cancelishodcall(info, tab){ 
	MMostOperId = await getMMostOperId();
	if (MMostOperId) { 
		const message = `@techsupport-1line-crm2 ${i.linkUrl} –û—Ö—Ä–∞–Ω–∞ - –æ—Ç–º–µ–Ω–∞ üö´`;
		sendMattermostMessage(message);
	}
}

async function sendtestmsgcustommsg(info, tab){
	MMostOperId = await getMMostOperId();
	if (MMostOperId) { 
		const textmsg = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –≤ —ç—Ç–æ –ø–æ–ª–µ');
		if (textmsg !== null && textmsg.length > 3) {
			const message = `@techsupport-1line-crm2 ${i.linkUrl} ${textmsg}`;
			sendMattermostMessage(message);
		} else if (textmsg !== null) {
			alert("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π");
		} else {
			console.log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞");
		}
	}
}

async function cancelsecondline(info, tab){	MMostOperId = await getMMostOperId();
	MMostOperId = await getMMostOperId();
	if (MMostOperId) { 
		const message = `@techsupport-2line ${i.linkUrl} –û—Ö—Ä–∞–Ω–∞ - –æ—Ç–º–µ–Ω–∞ üö´`;
		sendMattermostMessage(message);
	}
}

async function send2ndlinetestmsgcustommsg(info, tab){
	MMostOperId = await getMMostOperId();
	if (MMostOperId) { 
		const textmsg = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –≤ —ç—Ç–æ –ø–æ–ª–µ');
		if (textmsg !== null && textmsg.length > 3) {
			const message = `@techsupport-2line ${i.linkUrl} ${textmsg}`;
			sendMattermostMessage(message);
		} else if (textmsg !== null) {
			alert("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π");
		} else {
			console.log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞");
		}
	}	
}

// —Ñ—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å stat.js —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–∫–æ–π –ª–∏–±–æ –∏–Ω—Ñ—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
	    if (request.name === "Ctxt") {
			if (request.question == 'sendResponse') {
				fetch(request.addr, request.options)
					.then(response => response.text())
					.then(result => { sendResponse({answer: result, respName: request.respName}) });
				return true;
			}
		}
});

async function getMMostOperId() {
	return new Promise(async (resolve) => {
	  let MMostOperId = localStorage.getItem('matermost_oid');
  
	  if (MMostOperId !== null) {
		resolve(MMostOperId);
	  } else {
		try {
		  const response = await fetch(OperId_API_URL);
		  
		  if (!response.ok) {
			throw new Error("Failed to fetch user data.");
		  }
  
		  const data = await response.json();
		  MMostOperId = data.id;
  
		  if (MMostOperId) {
			localStorage.setItem('matermost_oid', MMostOperId);
			resolve(MMostOperId);
		  }
		} catch (error) {
		  console.error("Error fetching user data:", error);
		  resolve(null); // –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –≤–µ—Ä–Ω—É—Ç—å null
		}
	  }
	});
  }

function sendMattermostMessage(message) {
    lastMessage = message; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    let bodyData = {
        message: message,
        channel_id: ChanelSupport,
        pending_post_id: `${MMostOperId}:`,
        user_id: MMostOperId
    };

    fetch(Messanger_API_URL, {
        "headers": {
            "accept": "*/*",
            "accept-language": "ru",
            "content-type": "application/json",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest"
        },
        "referrerPolicy": "no-referrer",
        "body": JSON.stringify(bodyData),
        "method": "POST",
        "mode": "cors",
        "credentials": "include"
    })
    .then(response => response.json())
    .then(data => {
        transfertoTSM(data.id);
    })
    .catch(error => {
        console.error("–û—à–∏–±–∫–∞:", error);
    });
}

function transfertoTSM(Chatid) {
	if (Chatid === lastChatId) { // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π chatid —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –∏ –ø–µ—Ä–µ–¥—ã–¥—É—â–∏–π
        sendMattermostMessage(lastMessage); // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
        return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ content.js
    }

    lastChatId = Chatid; // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π chatid

	chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
	  const activeTab = tabs[0];
	  if (activeTab) {
		chrome.tabs.sendMessage(activeTab.id, { action: "CallMMComment", Chatid: Chatid });
	  }
	});
}