let allWordSets = [];  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–±–æ—Ä–∞—Ö —Å–ª–æ–≤
let checkedarray = [];

var win_Vocabulary = `<div style="display: flex;">
					<span style="cursor: -webkit-grab;">

					     <div style="margin: 5px; width:500px;">
                            <button class="commonbtn" title="—Å–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é" id="hideVocabularyMenu" style="width:50px; height:30px; background: #228B22;">hide</button>
							<button class="commonbtn" id="ClearVocabulary" title = "–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ" style="margin: 5px; width: 30px; height: 30px; padding: 0">üßπ</button>
                        </div>

						<div id="vocabularbar" class="vocabularbarcls">
							<div id="searchtoolswords" style="margin: 5px; width:500px;">
								<input id="iduserwords" style="width: 360px;text-align: center; height: 23px;" placeholder="Enter student ID to get vocabulary info">
								<button id="findwords" class="commonbtn" style="height: 30px;width: 30px; margin-left: 5px;">üîé</button>
							</div>
							<div class="vocabularremtools">
								<button class="commonbtn" id="deleteallwords" title="–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞">‚ùå Selected</button>
								<button class="commonbtn" id="unlearnallwords" title="–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤">‚≠ï Reset Learned</button>
								<button class="commonbtn" id="delunlearnallwords" title="–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞">‚õî Learned</button>
								<button class="commonbtn" id="learncheckedwords" title="–î–µ–ª–∞–µ—Ç —Å–ª–æ–≤–æ –≤—ã—É—á–µ–Ω–Ω—ã–º">‚úÖ Learn</button>
								<button class="commonbtn" id="selectallwords" title="–í—ã–¥–µ–ª—è–µ—Ç –≤—Å–µ —Å–ª–æ–≤–∞">‚òë Select All</button>
							</div>
                            <div class="vocabularremtools">
                                <input id="searchwordinput" style="width: 470px; text-align: center; height: 23px; display: none; margin-top: 7px;" placeholder="Enter a word or part of it to search">
							</div>
						</div>

						<div id="wordsout" class="wordsout">
						</div>

					</span>
				   </div>`;


if (localStorage.getItem('winTopVocabulary') == null) { //additional students Vocabulary
    localStorage.setItem('winTopVocabulary', '118');
    localStorage.setItem('winLeftVocabulary', '407');
}

let wintVocabulary = document.createElement('div');
document.body.append(wintVocabulary);
wintVocabulary.className = 'wintInitializeVocabulary'
wintVocabulary.style = 'display:none;  top: ' + localStorage.getItem('winTopVocabulary') + 'px; left: ' + localStorage.getItem('winLeftVocabulary') + 'px;';
wintVocabulary.setAttribute('id', 'AFMS_Vocabulary');
wintVocabulary.innerHTML = win_Vocabulary;

//Vocabulary

var listenerVocabulary = function (e, a) {
    wintVocabulary.style.left = Number(e.clientX - myX9992) + "px";
    wintVocabulary.style.top = Number(e.clientY - myY9992) + "px";
    localStorage.setItem('winTopVocabulary', String(Number(e.clientY - myY9992)));
    localStorage.setItem('winLeftVocabulary', String(Number(e.clientX - myX9992)));
};
wintVocabulary.onmousedown = function (a) {
    if (checkelementt(a)) {
        window.myX9992 = a.layerX;
        window.myY9992 = a.layerY;
        document.addEventListener('mousemove', listenerVocabulary);
    }
}
wintVocabulary.onmouseup = function () { document.removeEventListener('mousemove', listenerVocabulary); }

//End of vocabulary

document.getElementById('VocabularyMenu').onclick = function () { // –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º

    if (wintVocabulary.style.display == 'none') {
        wintVocabulary.style.display = ''
        document.getElementById('vocabularbar').style.display = '';
        firstgetvocabulary(document.getElementById('iduserwords'));        
    } else wintVocabulary.style.display = 'none'


    document.getElementById('findwords').onclick = async function () {
        document.getElementById('searchwordinput').value = ''
        document.getElementById('searchwordinput').style.display = 'none'
        getwordsets(document.getElementById('iduserwords').value.trim())

    }

    document.getElementById('ClearVocabulary').onclick = function () {
        document.getElementById('wordsout').innerHTML = '';
        document.getElementById('iduserwords').value = '';
        allWordSets = [];
        document.getElementById('searchwordinput').value = ''
        document.getElementById('searchwordinput').style.display = 'none'
    }

    document.getElementById('hideVocabularyMenu').onclick = function () {
        document.getElementById('ClearVocabulary').click();
        wintVocabulary.style.display = 'none'
    }

    document.getElementById('selectallwords').onclick = toggleAllWordSelection; //—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ª–æ–≤
    document.getElementById('delunlearnallwords').onclick = deleteLearnedWords; // —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    document.getElementById('learncheckedwords').onclick = learnSelectedWords; // —Ñ—É–Ω–∫—Ü–∏—è –∏–∑—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –º–∏–Ω—É—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    document.getElementById('unlearnallwords').onclick = resetProgressForSelectedWords; // —Ñ—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –≤—ã—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    document.getElementById('deleteallwords').onclick = deleteSelectedWords; // —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω—è —Å–ª–æ–≤ –≤—ã–±—Ä–∞–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ —Ç–æ –≤—Å–µ—Ö!
} // end of open vocabulary menu function

async function firstgetvocabulary(idfield) {
    const userId = await getUserId();
    idfield.value = userId;

    if (idfield.value && idfield.value.trim() !== '') {
        document.getElementById('findwords').click();
    }
}

function toggleAllWordSelection() { //—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ª–æ–≤
    const wordElements = document.getElementsByClassName('wminId');
    const checkboxes = document.getElementsByName('checkfordel');
    const selectAllCheckboxes = document.getElementsByName('selectwordsinonelesson');
    
    const areAllChecked = Array.from(checkboxes).every(chk => chk.checked);

    if (areAllChecked) {
        // –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ —É–∂–µ –≤—ã–¥–µ–ª–µ–Ω—ã, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
        Array.from(checkboxes).forEach(chk => chk.checked = false);
        Array.from(selectAllCheckboxes).forEach(chk => chk.checked = false); // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å selectonesection —á–µ–∫–±–æ–∫—Å–æ–≤
        checkedarray = [];
    } else {
        // –ò–Ω–∞—á–µ –≤—ã–¥–µ–ª—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –º–∞—Å—Å–∏–≤
        Array.from(checkboxes).forEach((chk, index) => {
            chk.checked = true;
            checkedarray.push(wordElements[index].textContent);
        });
        Array.from(selectAllCheckboxes).forEach(chk => chk.checked = true); // –í—ã–¥–µ–ª—è–µ–º –≤—Å–µ selectonesection —á–µ–∫–±–æ–∫—Å—ã
    }
}

async function deleteLearnedWords() { // —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    const learnedWordsElements = document.getElementsByClassName('islearnedyesno');
    const userstud = document.getElementById('iduserwords').value.trim();
    const wordIds = document.getElementsByClassName('wminId');    
    const learnedIndices = [];
    for (let i = 0; i < learnedWordsElements.length; i++) {
        if (learnedWordsElements[i].textContent == '‚úî')
        learnedIndices.push(i)
    }

    if (learnedIndices.length) {
        const confirmDelete = confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞?");
        if (confirmDelete) {
            alert("üöÄ–ó–∞–ø—Ä–æ—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è üòã");
            for (let j = 0; j < learnedIndices.length; j++) {
                try {
                    await fetch(`https://api-words.skyeng.ru/api/v2/words/${wordIds[learnedIndices[j]].textContent}.json?studentId=${userstud}`, {
                        headers: {
                            "accept": "application/json, text/plain, */*",
                            "authorization": `Bearer ${token.token_global}`,
                        },
                        method: "DELETE"
                    });
                } catch (err) {
                    console.error("Error deleting learned word: ", err);
    }
            }
            alert("–í—Å–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã üòè");
            await getwordsets(userstud);
            liveSearch(document.getElementById('searchwordinput').value);
        }
    } else {
        alert("–í—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ —É—á–µ–Ω–∏–∫–∞ –Ω–µ—Ç.");
    }
}

async function learnSelectedWords() { // —Ñ—É–Ω–∫—Ü–∏—è –∏–∑—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –º–∏–Ω—É—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    const checks = document.getElementsByName('checkfordel');
    const wordIds = document.getElementsByClassName('wminId');
    const userstud = document.getElementById('iduserwords').value.trim();
    let flagselected = [];
    for (let i = 0; i < checks.length; i++) {
        if (checks[i].checked == true)
            flagselected.push(i)
    }

    if (flagselected.length) {
        const confirlearn = confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∫ '–≤—ã—É—á–µ–Ω–Ω—ã–µ'?");
        if (confirlearn){
            alert("üöÄ–ó–∞–ø—Ä–æ—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è üòã");
        for (let i = 0; i < flagselected.length; i++) {
                try {
                    await fetch(`https://api-words.skyeng.ru/api/for-vimbox/v1/words/${wordIds[flagselected[i]].textContent}/skip.json?studentId=${userstud}`, {
                        headers: {
                            "accept": "application/json, text/plain, */*",
                            "authorization": `Bearer ${token.token_global}`,
                        },
                        method: "PUT"
                    });
                } catch (err) {
                    console.error("Error updating word status: ", err);
}
            }
            alert("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã—É—á–µ–Ω—ã üòè");
            await getwordsets(userstud);
            liveSearch(document.getElementById('searchwordinput').value);
        }
    } else {
        alert("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –≤—ã—É—á–µ–Ω. –û—Ç–º–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.");
    }
}

async function resetProgressForSelectedWords() { // —Ñ—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –≤—ã—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    const checks = document.getElementsByName('checkfordel');
    const wordIds = document.getElementsByClassName('wminId');
    const userstud = document.getElementById('iduserwords').value.trim();
    let flagselected = [];
    for (let i = 0; i < checks.length; i++) {
        if (checks[i].checked == true)
            flagselected.push(i)
    }

    if (!flagselected.length) {
        const confirmResetAll = confirm("–ù–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–∏–æ–¥–∏–Ω –ø—É–Ω–∫—Ç. –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—à–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?");
        if (confirmResetAll) {
            alert("üöÄ–ó–∞–ø—Ä–æ—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è üòã");
            for (let g = 0; g < wordIds.length; g++) {
                try {
                    await fetch(`https://api-words.skyeng.ru/api/trainings/v1/users/${userstud}/meanings/${wordIds[g].textContent}/progress`, {
                        headers: {
                            "accept": "application/json, text/plain, */*",
                            "authorization": `Bearer ${token.token_global}`,
                        },
                        method: "DELETE"
                    });
                } catch (err) {
                    console.error("Error resetting progress: ", err);
                }
            }
            alert("–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö —Å–ª–æ–≤ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω! ü§†");
            await getwordsets(userstud);
            liveSearch(document.getElementById('searchwordinput').value);
        }
    } else {
        const confirmResetSelected = confirm("–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–ª–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?");
        if (confirmResetSelected) {
            alert("üöÄ–ó–∞–ø—Ä–æ—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è üòã");
            for (let g = 0; g < flagselected.length; g++) {
                try {
                    await fetch(`https://api-words.skyeng.ru/api/trainings/v1/users/${userstud}/meanings/${wordIds[flagselected[g]].textContent}/progress`, {
                        headers: {
                        "accept": "application/json, text/plain, */*",
                            "authorization": `Bearer ${token.token_global}`,
                    },
                        method: "DELETE"
                    });
                } catch (err) {
                    console.error("Error resetting selected word's progress: ", err);
        }
    }
            alert("–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω! ü§†");
            await getwordsets(userstud);
            liveSearch(document.getElementById('searchwordinput').value);
        }
    }
}

async function deleteSelectedWords() { // —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω—è —Å–ª–æ–≤ –≤—ã–±—Ä–∞–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ —Ç–æ –≤—Å–µ—Ö!
    const checks = document.getElementsByName('checkfordel');
    const idslov = document.getElementsByClassName('wminId');
    const userstud = document.getElementById('iduserwords').value.trim();
    let flagselected = [];
    for (let i = 0; i < checks.length; i++) {
        if (checks[i].checked == true)
            flagselected.push(i)
    }

    if (!flagselected.length) {
        const confirmDeleteAll = confirm("–ù–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–∏–æ–¥–∏–Ω –ø—É–Ω–∫—Ç. –ë—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?");
        if (confirmDeleteAll) {
            alert("üöÄ–ó–∞–ø—Ä–æ—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è üòã");
            for (let g = 0; g < idslov.length; g++) {
                try {
                    await fetch(`https://api-words.skyeng.ru/api/v2/words/${idslov[g].textContent}.json?studentId=${userstud}`, {
                        headers: {
                        "accept": "application/json, text/plain, */*",
                            "authorization": `Bearer ${token.token_global}`,
                    },
                        method: "DELETE"
                    });
                } catch (err) {
                    console.error("Error deleting word: ", err);
                }
            }
            alert("–í—Å–µ —Å–ª–æ–≤–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã! ü§†");
            await getwordsets(userstud);
            liveSearch(document.getElementById('searchwordinput').value);
        }
    } else {
        const confirmDeleteSelected = confirm("–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?");
        if (confirmDeleteSelected) {
            alert("üöÄ–ó–∞–ø—Ä–æ—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è üòã");
            for (let g = 0; g < flagselected.length; g++) {
                try {
                    await fetch(`https://api-words.skyeng.ru/api/v2/words/${idslov[flagselected[g]].textContent}.json?studentId=${userstud}`, {
                        headers: {
                            "accept": "application/json, text/plain, */*",
                            "authorization": `Bearer ${token.token_global}`,
                        },
                        method: "DELETE"
                    });
                } catch (err) {
                    console.error("Error deleting selected word: ", err);
                }
            }
            alert("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã! ü§†");
            await getwordsets(userstud);
            liveSearch(document.getElementById('searchwordinput').value);
        }
}
}

async function getwordsets(studentId) { // –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ –£
    allWordSets = [];
    document.getElementById('wordsout').innerHTML = '';

    let wordsetsarr = await fetch("https://api-words.skyeng.ru/api/for-vimbox/v1/wordsets.json?studentId=" + studentId + "&pageSize=500", {
        "headers": {
            "accept": "application/json, text/plain, */*",
            "authorization": "Bearer " + token.token_global,
        },
    }).then(r => r.json());

    for (let wordset of wordsetsarr.data) {
        let wordSetData = {
            title: wordset.title,
            words: []
        };

        let objectwdsets = await fetch("https://api-words.skyeng.ru/api/v1/wordsets/" + wordset.id + "/words.json?wordsetId=" + wordset.id + "&studentId=" + studentId + "&page=1&pageSize=500", {
            "headers": {
                "accept": "application/json, text/plain, */*",
                "authorization": "Bearer " + token.token_global,
            },
        }).then(r => r.json());

        let meanings = objectwdsets.data.map(word => word.meaningId).toString();
        
        let wordsnames = await fetch("https://dictionary.skyeng.ru/api/for-services/v2/meanings?ids=" + meanings + "&acceptLanguage=ru", {
            "headers": {
                "accept": "application/json, text/plain, */*",
                "authorization": "Bearer " + token.token_global,
            },
        }).then(r => r.json());

        for (let j = 0; j < objectwdsets.data.length; j++) {
            wordSetData.words.push({
                text: wordsnames[j].text || '',
                isLearned: objectwdsets.data[j].isLearned,
                progress: objectwdsets.data[j].progress,
                meaningId: objectwdsets.data[j].meaningId
            });
        }

        allWordSets.push(wordSetData);
        renderWordSets(allWordSets, false);

        document.getElementById('searchwordinput').style.display = ''
    }
}

function renderWordSets(wordSets, isSearch = false) { //–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–π
    let htmlContent = '';
    
    for (let wordSet of wordSets) {
        let wordsHtml = '';
        let displayBox = 'none';  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–ª–æ–∫ —Å–∫—Ä—ã—Ç
        
        for (let word of wordSet.words) {
            wordsHtml += `<span style="color: #00FA9A; margin-left:5px;">&#5129; </span>
                          <span style="color: bisque; cursor: text;" name="meaningsId">
                              <span style="color: #30dbe3; text-shadow: 1px 2px 5px rgb(0 0 0 / 55%);">${word.text}</span>
                              <input type="checkbox" name="checkfordel" class="checkdel">
                              <span style="display:none" class="sectionforcheck">section</span>
                              <span class="savelinktowordcms" title="–ö–æ–ø–∏—Ä—É–µ—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ CMS —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞"> üíæ </span>
                              <span class="checkislearned">${word.isLearned ? '<span class="islearnedyesno" style="float:right;margin-right:30px;">‚úî</span>' : '<span class="islearnedyesno" style="float:right; margin-right:30px;">‚ùå</span>'}</span>
                              <span style="float:right; margin-right:35px;">${word.progress < 100 ? `<span style="padding-left: 8px;">${word.progress}%</span>` : `${word.progress}%`}</span>
                              <span class="wminId" style="float:right; margin-right:5px;">${word.meaningId}</span>
                          </span>
                          <br>`;
        }

        if (isSearch && wordSet.words.length > 0) {
            displayBox = 'block';
        }
        
        htmlContent += `<div class="wordsetname">${wordSet.title} (${wordSet.words.length})</div>
                        <div class="boxwithwords" style="display:${displayBox}">
                            <div class="headerexplain">
                                <span style="margin-left: 30px;">–°–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞</span>
                                <span style="margin-left: 142px;">ID —Å–ª–æ–≤–∞</span>
                                <span style="margin-left: 12px;"> % </span>
                                <span style="margin-left: 10px;"> –í—ã—É—á–µ–Ω–æ </span>
                                <input type="checkbox" name="selectwordsinonelesson" class="selectonesection">
                            </div>
                            ${wordsHtml}
                        </div>`;
    }
    
    document.getElementById('wordsout').innerHTML = htmlContent;
    setupWordSetToggle();
    setupSelectAllWordsInSet();
    setupLinkCopyToClipboard();
}

function setupWordSetToggle() { // —Ä–∞—Å—Å–∫—Ä—ã—Ç–∏–µ/—Å–∫—Ä—ã—Ç–∏–µ –±–ª–æ–∫–æ–≤
    let wordsetnames = document.getElementsByClassName('wordsetname');
    let boxwithwordsbar = document.getElementsByClassName('boxwithwords');
    for (let i = 0; i < wordsetnames.length; i++) {
        wordsetnames[i].onclick = function () {
            if (boxwithwordsbar[i].style.display === 'none' || boxwithwordsbar[i].style.display === '')
                boxwithwordsbar[i].style.display = 'block';
            else
                boxwithwordsbar[i].style.display = 'none';
    }
    }
}

function setupSelectAllWordsInSet() { // –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ –±–ª–æ–∫–µ
    const selectoneles = document.getElementsByName('selectwordsinonelesson');
    const checkboxesall = document.getElementsByName('checkfordel');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
    for (let selectone of selectoneles) {
        selectone.addEventListener('click', function() {
            let parentDiv = selectone.closest('.boxwithwords');
            let checkboxesInGroup = parentDiv.querySelectorAll('[name="checkfordel"]');
            
            let allCheckedInSection = Array.from(checkboxesInGroup).every(chk => chk.checked);

            checkboxesInGroup.forEach(chk => {
                chk.checked = !allCheckedInSection;
            });
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ —Å–ª–æ–≤
    for (let checkbox of checkboxesall) {
        checkbox.addEventListener('change', function() {
            let parentDiv = checkbox.closest('.boxwithwords');
            let selectOneInSection = parentDiv.querySelector('.selectonesection');
            let checkboxesInGroup = parentDiv.querySelectorAll('[name="checkfordel"]');

            let allCheckedInSection = Array.from(checkboxesInGroup).every(chk => chk.checked);
            selectOneInSection.checked = allCheckedInSection;
        });
    }
}

function setupLinkCopyToClipboard() { // —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ CMS —Å–ª–æ–≤–∞—Ä—è
    let savebtnsarr = document.getElementsByClassName('savelinktowordcms');
    for (let z = 0; z < savebtnsarr.length; z++) {
        savebtnsarr[z].onclick = function () {
            let allmeanings = document.getElementsByClassName('wminId');
            copyToClipboardTSM("https://dictionary.skyeng.ru/cms/meaning/" + allmeanings[z].textContent);
        }
    }
}

document.getElementById('searchwordinput').addEventListener('input', function() { // –ª–∏—Å—Ç–µ–Ω–µ—Ä –¥–ª—è –∂–∏–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    liveSearch(this.value);
});

function liveSearch(query) { // –∂–∏–≤–æ–π –ø–æ–∏—Å–∫
    query = query.toLowerCase().trim();

    if(query === "") {
        renderWordSets(allWordSets, false);
        return;
    }

    const filteredWordSets = allWordSets.map(wordSet => {
        return {
            title: wordSet.title,
            words: wordSet.words.filter(word => word.text.toLowerCase().includes(query))
        };
    }).filter(wordSet => wordSet.words.length > 0);

    renderWordSets(filteredWordSets, true); 
}